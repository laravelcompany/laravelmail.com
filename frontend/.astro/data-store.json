[["Map",1,2,9,10,113,114],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.8","content-config-digest","27c322fb4d30a6a3","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":\"0.0.0.0\",\"port\":11000,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,23,24,32,33,41,42,50,51,59,60,68,69,77,78,86,87,95,96,104,105],"campaigns",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"legacyId":21,"deferredRender":22},{"title":14,"author":15,"draft":16,"tags":17,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Campaigns","Laravel Mail",false,[],"![/img/messages.png](/img/campaigns.png)\n\n## Overview\n\nA campaign is a set of individual email messages that are sent to your [subscribers](/docs/subscribers). An example may be a new product launch or a regular newsletter.\n\n> Before creating a campaign, the following must already be configured:\n> - at least one [email service](/docs//email-services).\n> - a list of [subscribers](/docs/subscribers) to target with your campaign.\n> - an [email template](/templates) for your campaign (optional, but recommended).\n\n## View Campaigns\n\nTo view a listing of your campaigns, click the _Campaigns_ link in the sidebar. This will take you to the campaigns index page.\n\n## Starting New Campaigns\n\nNavigate to the campaigns index page and click the _New Campaign_ button.\n\n![/img/messages.png](/img/create-campaign.png)\n\n### Fields\n\n#### Campaign Name\n\nA friendly name for your campaign that is only used within Laravel Mail. It helps you properly distinguish one campaign from another. An example may be \"Newsletter - May 2020\".\n\n#### Subject\n\nThe subject of your campaign email. This is what your mail recipients will see in their inbox, so you should try to keep it clear and concise. The Subject can include placeholders for the Subscriber's `{{first_name}}`, `{{last_name}}` and `{{email}}`. Refer to the Placeholders section of the [Templates](/docs/v2/features/templates) documentation for more information.\n\n#### From Name\n\nAlso known as the the email sender name. This tells the mail recipients who sent the message.\n\n#### From Email\n\nThis is what your mail recipients will see as the \"from\" address. This should be an address that you have ownership of and must match the settings for the selected email service.\n\n#### Template (optional)\n\nThe template that you wish to use for your campaign email.\n\n#### Track Opens\n\nDetermines whether or not individual email opens are tracked. If you wish to track opens, webhooks must be configured for your email service.\n\n#### Track Clicks\n\nDetermines whether or not individual email clicks are tracked. If you wish to track clicks, webhooks must be configured for your email service.\n\n#### Content\n\nThe body of your campaign email. This is what gets sent to your subscribers, so make it good!\n\nThe content can include placeholders. To understand which placeholders are available to you, see the Placeholders section of the [Templates](/docs/templates) documentation.\n\nOnce you have filled out the form, click _Save and Continue_. Your campaign will now be marked as a **Draft**.\n\n## Sending Campaigns\n\nCampaigns are dispatched from the preview page.\n\n### Test Email\n\nIt's good practice to send out a test email before you dispatch your campaign. \nThis allows you to see how your email will appear to your recipients and offers an opportunity to pick up on any mistakes you may have made.\n To send a test email, simply enter an email address in the `Recipient` field and click _Send Test Email_. It will be dispatched using your configured email service.\n\n### Sending Options\n\n#### Recipients\n\nYou can choose to dispatch your campaign to your entire subscriber list or those with specific tags.\n\n#### Schedule\n\nYou can schedule your campaign to be dispatched immediately or at a later date and time.\n\n#### Sending Behaviour\n\nYou can specify one of two sending behaviours for your campaign:\n\n- `Queue Draft` - this will generate each of your messages as a draft and requires you to dispatch each email individually from the _Messages_ section. This is a good idea if you want to double check how each email will display prior to sending, especially if you're using a complex template that may result in each email varying from subscriber to subscriber. We do not recommend this option if you have a large list of subscribers!\n- `Send Automatically` - this will generate your messages and dispatch them automatically.\n\n> If you find that your campaigns do not send, please ensure you have configured scheduled tasks and queue workers as described in the [Configuration](/docs/configuration) section.\n\n\n#### Campaign Analytics\n![/img/messages.png](/img/campaign-analytics.png)\n\nAfter a campaign has been sent you can view the analytics for that campaign.","src/content/docs/campaigns.mdx","dd1858fad640a5e8","campaigns.mdx",true,"configuration",{"id":23,"data":25,"body":28,"filePath":29,"digest":30,"legacyId":31,"deferredRender":22},{"title":26,"author":15,"draft":16,"tags":27,"hide_breadcrumbs":22,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Configuration",[],"![https://leadscaptain.com/images/logo.svg](https://leadscaptain.com/images/logo.svg)\n\n\n\n## Creating Configuration File\n\nLaravel Mail Platform's configuration is handled through the`.env` file. \nBy default, this file does not exist. \nTo create it manually, you will need to clone the included `.env.example`, rename it to `.env` and make changes as necessary.\n\n> Any keys that are set in the `.env` file will be used, even if they are blank. If you do not wish to actively set a key, you should remove it from your `.env` file, rather than leave it blank.\n\n### Key Generation\n\nIf you did not run the setup command, or if for some reason the `APP_KEY` value is empty, you will need to create an encryption key. This is used by Laravel Mail Platform to apply encryption to things like user sessions.\n\nTo generate a new key, you should run the following command:\n\n```bash\nphp artisan key:generate\n```\n\n> Although key generation can be run again, this will invalidate any sessions or make any stored encrypted data inaccessible. You should not generate a new key unless absolutely necessary.\n\n### Base URL\n\nYou will need to set the `APP_URL` variable in the `.env` file to the base URL for your installation of Laravel Mail Platform.\n\nFor example, if you are hosting your installation of Laravel Mail Platform at `campaigns.example.com`, you will need to set the following:\n\n```\nAPP_URL=https://campaigns.example.com\n```\n\nThis is necessary to allow Laravel Mail Platform to correctly generate unsubscribe links, or links for user registration emails.\n\n### Database Connection\n\nIn order for Laravel Mail Platform to connect to your database, you must set the database configuration values in the `.env` file.\n\nFirstly, you need to specify what type of database you are using by setting the `DB_CONNECTION` value to either `mysql` for a MySQL database or `pgsql` for a PostgreSQL database.\n\nSecondly, you need to set the connection details for your database installation. The following values need to be set:\n\n- `DB_HOST` – This is the host of your database, e.g. `127.0.0.1` for a local installation\n- `DB_PORT` - The port Laravel Mail Platform should use to talk to your database\n- `DB_DATABASE` – The database Laravel Mail Platform should use to store its data\n- `DB_USERNAME` – The username Laravel Mail Platform will use to authenticate itself with your database\n- `DB_PASSWORD` – The password Laravel Mail Platform will use to authenticate itself with your database\n\n### Database Migrations\n\nTo set up the database schema, migrations must be run. Migrations are instructions an application uses to configure database schema, running in sequence from beginning to end in order to ensure that the database is set up as the application expects it to be.\n\n> Do not make custom modifications to the database yourself. Any database changes that Laravel Mail Platform requires should be accomplished through the running of migrations.\n\n> Before running migrations, ensure that you have correctly configured your database connection, as schema changes will be made.\n\nThe included command-line setup command will run migrations for you (after a prompt), but you can run migrations manually using the following command:\n\n```bash\nphp artisan migrate:fresh ---seed\n```\n\n### Publishing Vendor Files\n\nRun the following command to publish the config, views, languages and assets from Laravel Mail Platform to your project:\n\n```bash\nphp artisan vendor:publish --provider=Laravel Mail Platform\\\\Base\\\\Laravel Mail LaravelMailServiceProvider\n```\n\n### Workspaces & Users\n\nIf you do not use the setup command to create a workspace and user with which to administer Laravel Mail Platform, you will need to go through the web interface registration process.\n\nYou must follow the User Management Email configuration specified in Additional Configuration in order to allow registration and user invitation in Laravel Mail Platform.\n\n## Additional Configuration\n\n### Cron Jobs\n\nLaravel Mail Platform makes use of regular background tasks and it is therefore essential to create a cron job to run every minute:\n\n```bash\n* * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1\n```\n\nPlease refer to the Laravel documentation on [Task Scheduling](https://laravel.com/docs/scheduling) for further information.\n\n### Message Sending & Queues\n\nLaravel Mail Platform sends email messages using a queue system. The queue can be processed synchronously or asynchronously. Asynchronous queues can be handled via your primary database or via redis.\n\nYou can specify which queue driver to use in the `QUEUE_CONNECTION` parameter in the `.env` file. This should be set to one of `sync`, `database` or `redis`, depending on your requirements. This configuration applies to all messages sent in Laravel Mail Platform and cannot be changed on a per-user, per-workspace or per-provider basis.\n\n#### Sync\n\nThe synchronous queue runs any queued jobs as they are requested, requiring the user to wait until the job has been completed before any further action can be taken.\n\nThis has the advantage of being simple and requiring no additional configuration. However, as this does not scale well, this approach is only recommended for relatively small message sending requirements.\n\nTo use the synchronous queue, you only need to set the `QUEUE_CONNECTION` to `sync`, and no further configuration is required.\n\n#### Database\n\nProcessing asynchronous queues via the database is considered a middle option. Running an asynchronous queue avoids the issues that come up using a synchronous queue, as messages can be processed without blocking further action being taken by the user, and will work until all jobs are completed regardless of how long it takes.\n\nThe advantage of using the database for running the asynchronous queue is that it requires no extra services to be run, as it uses the primary database (MySQL or Postgres) that you have already configured for Laravel Mail Platform.\n\nThe main disadvantage is that under heavy workloads the queue can negatively affect the performance of the database.\n\nAs such, the database queue is recommended for small to medium sized mailing lists.\n\nTo use the database driver, you must first set the `QUEUE_CONNECTION` to `database` in your `.env` file. You also need to run the following commands, which will create a new `jobs` table in your database, which that will be used to manage the queue.\n\n```bash\nphp artisan queue:table\nphp artisan migrate\n```\n\n#### Redis\n\nRedis is the recommended solution for running medium to large mailing lists.\n\nYou will of course need an installation of redis on your server. You will then need to set the `QUEUE_CONNECTION` to `redis` and set the following configuration values in your `.env` file:\n\n- `REDIS_HOST`\n- `REDIS_PASSWORD`\n- `REDIS_PORT`\n\n### Running the queue without Laravel Horizon\n\nIf you don't want to use Horizon to manage you redis queue or you're using the database driver you will have to run a [queue worker](https://laravel.com/docs/queues#running-the-queue-worker) for each queue that Laravel Mail Platform uses.\n\n- `Laravel Mail Platform-message-dispatch`: dispatches messages to the email service\n- `Laravel Mail Platform-webhook-process`: processes incoming webhooks\n\n```\nphp artisan queue:work --queue=Laravel Mail Platform-message-dispatch\nphp artisan queue:work --queue=Laravel Mail Platform-webhook-process\n```\n\n### Running Redis Queues With Laravel Horizon\n\nLaravel Mail Platform bundles [Laravel Horizon](https://laravel.com/docs/horizon) as an easy way to run and manage redis queues.\n\nConfiguration for the queues necessary to run Laravel Mail Platform is already included. In order to use Horizon as your queue manager, you should first publish the Horizon assets:\n\n```\nphp artisan horizon:publish\n```\n\nTo start processing your queue items with Horizon, you simply need to run the following command:\n\n```\nphp artisan horizon\n```\n\nWhen using Horizon in production, you should consider using a service to ensure the queue runner restarts if it fails for any reason. The Horizon documentation has a [guide](https://laravel.com/docs/horizon#deploying-horizon) on how to use Supervisor to do this.\n\n#### Autoscaling\n\nThe configuration for Horizon included with Laravel Mail Platform allows autoscaling of queue workers. By default, webhooks received and messages sent via the queue each have a minimum of 2 processes running, and a maximum of 10 or 20. If these values do not suit your requirements, they can be adjusted in the `config/horizon.php` file—in particular `supervisor-2` and `supervisor-3`—using the `minProcesses` and `maxProcesses` values.\n\n### User Management Email\n\nIn order to use user management functionality (for example, inviting new users or password resets) in Laravel Mail Platform, it is necessary to set up an email service that Laravel Mail Platform can use to send the messages.\n\n> If you are not going to be inviting any other users or team members to your Laravel Mail Platform installation, then this section can be ignored.\n\n> There is no relationship between Laravel Mail Platform's internal mail configuration and any email services that are configured for a workspace.\n\n> You will need to set `Laravel Mail Platform_REGISTER=true` in the `.env` file in order to use the registration and user invitation functionality.\n\n> By default, users are granted the ability to reset their passwords. If you wish to disable password resets, you must set `Laravel Mail Platform_PASSWORD_RESET=false` in the `.env` file.\n\nYou first need to set `MAIL_MAILER` to your chosen service. The options here are `smtp`, `sendmail`, `ses`, `mailgun` and `postmark`.\n\n#### SMTP & Sendmail\n\nWhen using a regular SMTP provider, or sendmail, you should set the following configuration values:\n\n- `MAIL_HOST` – This is the host for the SMTP server\n- `MAIL_PORT` – This is the port that will be used to connect to the SMTP server\n- `MAIL_USERNAME` – The username used to authenticate with the SMTP server\n- `MAIL_PASSWORD` – The password used to authenticate with the SMTP server\n- `MAIL_FROM_ADDRESS` – The address that mail will appear to come from\n- `MAIL_FROM_NAME` – The name that mail will appear to come from\n\n#### SES\n\nWhen using SES as your mail service, you should set the following configuration values, adding them to the `.env` file if they are not already present:\n\n- `AWS_ACCESS_KEY_ID` – Your AWS ID key\n- `AWS_SECRET_ACCESS_KEY` – Your AWS secret key\n- `AWS_DEFAULT_REGION` – Your AWS region (defaults to `us-east-1` if not included in the configuration file)\n\n#### Mailgun\n\nWhen using Mailgun as your mail service, you should set the following configuration values, adding them to the `.env` file if they are not already present:\n\n- `MAILGUN_DOMAIN`\n- `MAILGUN_SECRET`\n- `MAILGUN_ENDPOINT` – (defaults to `api.mailgun.net` if not included in the configuration file)\n\n#### Postmark\n\nWhen using Postmark as your mail service, you should set the following configuration values, adding them to the `.env` file if they are not already present:\n\n- `POSTMARK_TOKEN`","src/content/docs/configuration.mdx","20a1d63888fd3c9c","configuration.mdx","deployment",{"id":32,"data":34,"body":37,"filePath":38,"digest":39,"legacyId":40,"deferredRender":22},{"title":35,"author":15,"draft":16,"tags":36,"hide_breadcrumbs":22,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Deployment",[],"![https://leadscaptain.com/images/logo.svg](https://leadscaptain.com/images/logo.svg)\n\n# Installation\n\nAs of Version 0.0.2, Laravel Mail can be installed as a stand-alone application (i.e. including everything you need to run Laravel Mail), or as a package inside an existing Laravel application.\n\nThis page covers the stand-alone installation. If you want to install Laravel Mail as a package, then head over to the [Package Installation guide](/docs/package-installation).\n\n\n## Requirements\n\nTo run Laravel Mail, your environment must meet a few minimum requirements:\n\n- PHP ≥ 8.3\n- Git\n- [Composer](https://getcomposer.org/)\n- MySQL (≥ 5.7), PostgreSQL (≥ 9.4), Sqlite (≥ 3.33)\n\n## Installing Laravel Mail\n\n### Install Dependencies\n\nOnce cloned, navigate to the project's root directory and run `composer install` to install Laravel Mail and its dependencies.\n\nFrom here, you can move on to the [Configuration & Setup](/docs//configuration) step.\n\n### Webserver\n\nYou will need to use a webserver (for example, Apache or nginx), in order to host your Laravel Mail installation.\n\nWhen setting up your webserver, it should be pointed to the `public` directory in order to correctly serve Laravel Mail.\n\nFor example, in nginx:\n\n```\nserver {\n    listen 80;\n    server_name campaigns.example.com;\n    root /var/www/campaigns.example.com/public;\n}\n```\n\nFor more detailed information, see the [Laravel deployment documentation](https://laravel.com/docs/deployment).","src/content/docs/deployment.mdx","db4af756702e5d21","deployment.mdx","email-services",{"id":41,"data":43,"body":46,"filePath":47,"digest":48,"legacyId":49,"deferredRender":22},{"title":44,"author":15,"draft":16,"tags":45,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Email Services",[],"## Introduction\nLaravel Mail Platform must be integrated with at least one email service provider in order for your emails to be dispatched. \nYou can have multiple email services configured at one given time. For example, you may wish to send newsletters via SES and transactional emails via Postmark.\n\n> The credentials for each email service is stored in an encrypted format in the database. If the `APP_KEY` in your `.env` field is changed or lost, you will need to re-enter the credentials for each email service again.\n\nLaravel Mail Platform currently integrates with the following five email service providers:\n\n## Testing\n\nYou can test if an Email Service has been correctly configured by clicking on the `Test` button in the page that lists all of your Email Services.  \n\n![/img/docs/providers/testing.png](/img/docs/providers/testing.png)\n\nIn order to test an Email Service you will have to provide the email address from which the email will be sent - this must be a verified email address or domain.\n\n\n\n## AWS SES\n\n### Sending Emails\n\nTo send e-mails using the Amazon SES provider, you will need an AWS account. If you don't already have an account, [visit the AWS website](https://aws.amazon.com/) and click the _Create an AWS Account_ button in the top right corner of the screen.\n\n![/img/docs/providers/aws/aws-1.png](/img/docs/providers/aws/aws-1.png)\n\nBe aware that you'll need to provide credit card details, even if you only intend to make use of the free tier.\n\nOnce you've created an account, navigate to the SES (Simple Email Service) control panel by typing \"simple email service\" into the `Find Services` input on the AWS Management Console and clicking on the relevant option in the dropdown.\n\n![/img/docs/providers/aws/aws-2.png](/img/docs/providers/aws/aws-2.png)\n\nClick _Go to identity management_;\n\n![/img/docs/providers/aws/aws-3.png](/img/docs/providers/aws/aws-3.png)\n\nYou'll need to verify the domain from which you want to send all your e-mails, so click _Verify a New Domain_.\n\n![/img/docs/providers/aws/aws-4.png](/img/docs/providers/aws/aws-4.png)\n\nAt this stage we're not going to generate the DKIM settings, but this is worth doing once you move to a production environment, as it will reduce the risk of any messages you send being marked as spam.\n\n![/img/docs/providers/aws/aws-5.png](/img/docs/providers/aws/aws-5.png)\n\nOnce you click _Verify This Domain_ you'll be provided with a domain verification record;\n\n![/img/docs/providers/aws/aws-6.png](/img/docs/providers/aws/aws-6.png)\n\nYou'll now need to visit the site that you use to manage DNS for the domain provided (usually the domain registrar). The steps to do this are beyond the scope of this documentation as they vary from provider to provider, but you will need to create a `TXT` entry for the relevant domain and paste in the strings from the `Name` and `Value` columns.\n\nOnce you've completed this step, click `Close`. At first the `Verification status` will be `pending verification` and `Enabled for sending` will be `No`.\n\n![/img/docs/providers/aws/aws-7.png](/img/docs/providers/aws/aws-7.png)\n\nAs long as you have set the DNS entry correctly, the `Verification status` will transition to `verified` and `Enabled for Sending` will show `Yes`. You should also receive a notification via e-mail to say that the domain has been successfully verified.\n\n![/img/docs/providers/aws/aws-8.png](/img/docs/providers/aws/aws-8.png)\n\nIt can take some time to make this transition, but if it doesn't work ensure you didn't accidentally copy and paste any whitespace at the beginning or end of either string.\n\nWe also need to create a \"configuration set\". In order to do that, select the _Configuration Sets_ option from the side menu of the SES panel.\n\n![/img/docs/providers/aws/aws-9.png](/img/docs/providers/aws/aws-9.png)\n\nIf you don't require e-mail tracking (delivery, opens etc) you only need to create the configuration set.\n\n![/img/docs/providers/aws/aws-10.png](/img/docs/providers/aws/aws-10.png)\n\nNext we need to generate an access key pair. To do this you'll need to visit the [IAM (Identity and Access Management) module of AWS](https://console.aws.amazon.com/iam/home?#/home).\n\nIt's best to create a new IAM user, so click _Users_ and _Add user_. You can create the key pair using your root user account, but as this allows unrestricted access to the AWS console, it's a security risk if the credentials are ever compromised.\n\nAs the user doesn't need access to the management console, you can just select the `Programmatic access` option.\n\n![/img/docs/providers/aws/aws-12.png](/img/docs/providers/aws/aws-12.png)\n\nIf you don't already have any groups configured, you'll need to create one at the next step. If you only want the account to be able to send e-mails then select the `AmazonSESFullAccess` policy.\n\n![/img/docs/providers/aws/aws-13.png](/img/docs/providers/aws/aws-13.png)\n\nIf you also want to enable e-mail tracking, you'll need to add the `AmazonSNSFullAccess` policy.\n\n![/img/docs/providers/aws/aws-14.png](/img/docs/providers/aws/aws-14.png)\n\nSelecting tags for the user is optional, so we're not going to enter any at this stage. Once the user has been created you should now be able to copy and paste the access key and secret access key to the Laravel Mail Platform provider configuration.\n\n![/img/docs/providers/aws/aws-15.png](/img/docs/providers/aws/aws-15.png)\n\nWe're now ready to configure the provider with Laravel Mail Platform.\n\n![/img/docs/providers/aws/aws-11.png](/img/docs/providers/aws/aws-11.png)\n\nCongratulations! You can now send e-mails using Amazon SES.\n\nIf you require any more information about SES, check the official [Amazon SES documentation](https://docs.aws.amazon.com/ses/index.html).\n\n### Tracking\n\nIf you want to enable tracking for e-mails that you send through SES, then there are a few additional steps we need to complete.\n\nYou'll need to configure Amazon's SNS (Simple Notification Service) in order for it to send the required webhooks to Laravel Mail Platform, so navigate to the SNS page from the AWS Management Console.\n\nBegin by creating a topic. Select _Topics_ from the menu and click _Create topic_. Everything other than a name is optional at this time.\n\n\n\n\n![/img/docs/providers/aws/aws-16.png](/img/docs/providers/aws/aws-16.png)\n\nWe also need to create a subscription to go along with our topic. For the Topic ARN, select the topic that you just created and select `HTTPS` as the protocol. The `Endpoint` will depend on your domain, but must end with `/api/v1/webhooks/aws`. For example, if Laravel Mail Platform is installed at `https://app.laravelmail.com`, then each webhook should point to `https://app.laravelmail.com/api/v1/webhooks/aws`.\n\nDo _not_ enable `raw message delivery`, otherwise the webhooks will not be handled correctly.\n\n![/img/docs/providers/aws/aws-17.png](/img/docs/providers/aws/aws-17.png)\n\nThe subscription needs to be confirmed before we can use it, but if you've supplied the correct URL for your Laravel Mail Platform instance, and it's already available to the outside world, we'll do that automatically for you. You should see `Status` transition to `Confirmed`.\n\n![/img/docs/providers/aws/aws-18.png](/img/docs/providers/aws/aws-18.png)\n\nWe now need to tell SES to send any e-mail tracking webhooks to this endpoint so navigate back to the SES panel (we're almost there now...).\n\nSelect the domain that you already configured from `Domains` and open the section titled `Notifications`.\n\n![/img/docs/providers/aws/aws-19.png](/img/docs/providers/aws/aws-19.png)\n\nClick _Edit Configuration_ and select the SNS topic that you created from the dropdown for each of the notification types.\n\n![/img/docs/providers/aws/aws-20.png](/img/docs/providers/aws/aws-20.png)\n\nFinally, we need to enable the notification types for the configuration step that we created. Select the configuration set from the list and select SNS from the dropdown next to `Add Destination`.\n\n![/img/docs/providers/aws/aws-21.png](/img/docs/providers/aws/aws-21.png)\n\nSelect all the notification types you wish to receive (excluding `Send` and `Rendering Failure`), and select the Topic from the list.\n\n![/img/docs/providers/aws/aws-22.png](/img/docs/providers/aws/aws-22.png)\n\nPhew! That's it folks! You should now be setup to send and track e-mails using Amazon AWS.\n\n![/img/docs/providers/aws/aws-23.png](/img/docs/providers/aws/aws-23.png)\n\nFor more information on Amazon SNS, visit the [official documentation](https://docs.aws.amazon.com/sns/latest/dg/sns-getting-started.html).\n\nFor more information on configuring SNS notifications for SES, visit the [developer guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-sns-notifications.html).\n\n### Throttling\n\nAWS throttles the sending of e-mails via the SES API. Requests are limited to 1 per second by default, but you can apply to have this rate increased.\n\nFor this reason you need to have a cache configured when using AWS. For a small mailing list the `file` driver is sufficient, but for medium or large mailing lists we recommend implementing `redis`.\n\nFor more information on SES throttling, see the official documentation [here](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-quotas.html?icmpid=docs_ses_console).\n\n\n## Sendgrid\n\n### Sending Emails\n\nTo send e-mails using the Twilio Sendgrid provider, you will need a Sendgrid account. If you don't already have one, [visit the Sendgrid website](https://sendgrid.com/) and sign up. No credit card is required and you can get up to 100 free emails per month.\n\nOnce registered, open the `Setup Guide`, choose the `Web API` integration and select the PHP language option.\n\n![/img/docs/providers/sendgrid/sendgrid-1.png](/img/docs/providers/sendgrid/sendgrid-1.png)\n\nGenerate an API key and copy it to your Laravel Mail Platform configuration.\n\n![/img/docs/providers/sendgrid/sendgrid-2.png](/img/docs/providers/sendgrid/sendgrid-2.png)\n\nCheck the `I've integrated the code above` box and click Next.\n\nSend a test e-mail from Laravel Mail Platform and if it works successfully click _Verify integration_.\n\n### Tracking\n\n![/img/docs/providers/sendgrid/sendgrid-3.png](/img/docs/providers/sendgrid/sendgrid-3.png)\n\nOpen and click tracking is enabled by default in SendGrid, but if you'd like to check the settings you'll find them under _Settings_ > _Tracking_.\n\n![/img/docs/providers/sendgrid/sendgrid-4.png](/img/docs/providers/sendgrid/sendgrid-4.png)\n\nYou can also enable subscription tracking from this page. If enabled, SendGrid will automatically add unsubscribe links to the bottom of every e-mail you send.\n\n![/img/docs/providers/sendgrid/sendgrid-5.png](/img/docs/providers/sendgrid/sendgrid-5.png)\n\nTo enable tracking within Laravel Mail Platform you'll need to enable event notifications from _Settings_ > _Mail Settings_.\n\nThe `HTTP POST URL` depends on your domain, but must end with `/api/v1/webhooks/sendgrid`. For example, if Laravel Mail Platform is installed at `https://app.laravelmail.com`, then each webhook should point to `https://app.laravelmail.com/api/v1/webhooks/sendgrid`.\n\nThat's it! You're now setup to send and track e-mails using SendGrid.\n\n\n\n## Postmark\n\n### Sending Email\n\nTo send e-mails using the Postmark provider, you will need a Postmark account. If you don't already have an account, visit the [Postmark website](https://postmarkapp.com/) and click the _Start Free Trial_ button in the top right corner of the screen.\n\nPostmark will automatically create a server for you, called `My First Server`. Click on the server and select the _API Tokens_ tab.\n\n![/img/docs/providers/postmark/postmark-1.png](/img/docs/providers/postmark/postmark-1.png)\n\nCopy the string from `Server API tokens` and create a provider within Laravel Mail Platform.\n\n![/img/docs/providers/postmark/postmark-2.png](/img/docs/providers/postmark/postmark-2.png)\n\nNext, navigate to _Sender Signatures_ and select the option to _Add Domain_.\n\n![/img/docs/providers/postmark/postmark-3.png](/img/docs/providers/postmark/postmark-3.png)\n\nEnter your domain name and click _Verify domain_.\n\n![/img/docs/providers/postmark/postmark-4.png](/img/docs/providers/postmark/postmark-4.png)\n\nYou'll now need to visit the site that you use to manage DNS for the domain provided (usually the domain registrar). The steps to do this are beyond the scope of this documentation as they vary from provider to provider, but you will need to create a `TXT` entry for the relevant domain and paste in the strings from the `Hostname` and `Add this value` columns.\n\n![/img/docs/providers/postmark/postmark-5.png](/img/docs/providers/postmark/postmark-5.png)\n\nOnce you've added the entry with your DNS provider, click the _Verify_ button and the DKIM status should transition to `Verified`. It can take some time to make this transition, but if it doesn't work ensure you didn't accidentally copy and paste any whitespace at the beginning or end of either string.\n\n![/img/docs/providers/postmark/postmark-6.png](/img/docs/providers/postmark/postmark-6.png)\n\nTo configure e-mail tracking, select the server from the `Servers` page, select the `Transactional` (`Default Transactional Stream`) stream from the list of `Message Streams`.\n\n![/img/docs/providers/postmark/postmark-7.png](/img/docs/providers/postmark/postmark-7.png)\n\nSelect the _Webhooks_ tab and click _Add webhook_.\n\n![/img/docs/providers/postmark/postmark-8.png](/img/docs/providers/postmark/postmark-8.png)\n\nThe `Webhook URL` depends on your domain, but must end with `/api/v1/webhooks/postmark`. For example, if Laravel Mail Platform is installed at `https://app.laravelmail.com`, then each webhook should point to `https://app.laravelmail.com/api/v1/webhooks/postmark`.\n\n![/img/docs/providers/postmark/postmark-9.png](/img/docs/providers/postmark/postmark-9.png)\n\nYou'll also need to enable open tracking and link tracking from the stream settings.\n\n![/img/docs/providers/postmark/postmark-10.png](/img/docs/providers/postmark/postmark-10.png)\n\nThat's it! You're now setup to send and track e-mails using Postmark.\n\n\n\n## Mailjet\n\n### Sending Emails\n\nTo send e-mails using the Mailjet provider, you will need a Mailjet account. If you don't already have an account, visit the [Mailjet website](https://www.mailjet.com/) to create one.\n\n> The Mailjet Free plan offers you 200 emails a day, which is enough to cover your basic needs if you are a small sender.\n\nWhen you first begin, you need to add and configure the _\"From:\"_ email address, also known as the _Sender Address_. Extensive documentation for this step is available [here](https://app.mailjet.com/support/how-to-add-a-sender-address,96.htm).\n\nFinally, in order to integrate Laravel Mail with Mailjet, you need to copy the `API Key` and the `API Secret Key`, which are [generated automatically](https://app.mailjet.com/account/api_keys) when your account is created, into your Laravel Mail provider configuration. \n\n![/img/docs/providers/mailjet/mailjet-1.png](/img/docs/providers/mailjet/mailjet-1.png)\n\nAlternatively, if you don't want to use the _Master API Key_ (which grants full access to your account), you can set up Sub-account API Keys and limit their scope. \n\n### Tracking\n\nBy default the tracking options for `opens` and `clicks` are activated for all new accounts. These settings can be changed on your [Account Preferences page](https://app.mailjet.com/account/settings), but keep in mind that Laravel Mail will always override them with the values that you choose in the application when creating a new campaign.\n\nTo enable tracking however you will have to set up _Webhooks_ from the [Account Information page](https://app.mailjet.com/account/triggers).\n\n![/img/docs/providers/mailjet/mailjet-2.png](/img/docs/providers/mailjet/mailjet-2.png)\n\nThe URL depends on your domain, but must end with `/api/v1/webhooks/mailjet`. For example, if Laravel Mail is installed at `https://app.laravelmail.com`, then each webhook should point to `https://app.laravelmail.com/api/v1/webhooks/mailjet`.\n\nYou'll need to add an entry for each type of event you want to track, but the URL is the same for each one of them.\n\nIf you want to limit the number of calls, you can choose to group together events that occurred over the last second. Laravel Mail is able to handle both single and grouped events.\n\nThat's it! You're now setup to send and track e-mails using Mailjet.\n\n\n## SMTP\n\n### Sending Emails\nLaravel Mail can also send your campaigns via SMTP. If you select this option, then you will __not__ be able to track your campaigns - for example, deliveries, open and click tracking will not be available.\n\n> For production environments, we recommend using one of the API Email Services instead of SMTP.\n\nTo create an SMTP Email Service in Laravel Mail, navigate to the **Email Services** tab, click the **Add Email Service** button and enter the relevant details, making sure to select **SMTP** as the type.\n\n\n\n## Local MTA Sender\n\n### Sending Emails\nLaravel Mail can also send your campaigns via our LOCAL MTA AGENT ( An mta aggent is used for transfering the email to the smtp and not a replacement service). \nYou will tend to use this when you have a high volume emails that needs dispaching.\nIf you select this option, then you will __not__ be able to track your campaigns - for example, deliveries, open and click tracking will not be available.\n\n\n```\n[\n  {\n    \"smtp\": {\n      \"address\": \"smtp.gmail.com\",\n      \"port\": 587,\n      \"username\": \"your-email@gmail.com\",\n      \"password\": \"your-email-password\"\n    },\n    \"message\": {\n      \"from\": \"your-email@gmail.com\",\n      \"to\": \"recipient1@example.com\",\n      \"content\": \"\u003Ch1>Hello, Recipient 1!\u003C/h1>\u003Cp>This is a test email sent using Laravel Mail.\u003C/p>\"\n    }\n  },\n  {\n    \"smtp\": {\n      \"address\": \"smtp.gmail.com\",\n      \"port\": 587,\n      \"username\": \"your-email@gmail.com\",\n      \"password\": \"your-email-password\"\n    },\n    \"message\": {\n      \"from\": \"your-email@gmail.com\",\n      \"to\": \"recipient2@example.com\",\n      \"content\": \"\u003Ch1>Hello, Recipient 2!\u003C/h1>\u003Cp>This is another test email sent using Laravel Mail.\u003C/p>\"\n    }\n  }\n]\n````","src/content/docs/email-services.mdx","ae2ca6dd0bf91848","email-services.mdx","index",{"id":50,"data":52,"body":55,"filePath":56,"digest":57,"legacyId":58,"deferredRender":22},{"title":53,"author":15,"draft":16,"tags":54,"hide_breadcrumbs":22,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Instalation",[],"![https://leadscaptain.com/images/logo.svg](https://leadscaptain.com/images/logo.svg)\n\n# Installation\n\n\nThis page covers the stand-alone installation. If you want to install Laravel Mail as a package, then head over to the [Package Installation guide](/docs/package-installation).\n\n\n## Requirements\n\nTo run Laravel Mail, your environment must meet a few minimum requirements:\n\n- PHP ≥ 8.3\n- Git\n- [Composer](https://getcomposer.org/)\n- MySQL (≥ 5.7), PostgreSQL (≥ 9.4), Sqlite (≥ 3.33)\n\n## Installing Laravel Mail\n\n### Install Dependencies\n\nOnce cloned, navigate to the project's root directory and run `composer install` to install Laravel Mail and its dependencies.\n\nFrom here, you can move on to the [Configuration & Setup](/docs//configuration) step.\n\n### Webserver\n\nYou will need to use a webserver (for example, Apache or nginx), in order to host your Laravel Mail installation.\n\nWhen setting up your webserver, it should be pointed to the `public` directory in order to correctly serve Laravel Mail.\n\nFor example, in nginx:\n\n```\nserver {\n    listen 80;\n    server_name campaigns.example.com;\n    root /var/www/campaigns.example.com/public;\n}\n```\n\nFor more detailed information, see the [Laravel deployment documentation](https://laravel.com/docs/deployment).","src/content/docs/index.mdx","6266c41f8d7a5b20","index.mdx","messages",{"id":59,"data":61,"body":64,"filePath":65,"digest":66,"legacyId":67,"deferredRender":22},{"title":62,"author":15,"draft":16,"tags":63,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Messages",[],"![/img/messages.png](/img/messages.png)\n\n## Overview\n\nAfter a campaign has been dispatched, a message will be generated for each targeted Subscriber. A message represents a single email. You can view all of your messages by clicking the _Messages_ link in the sidebar. You will notice that there are two types of message:\n\n### Drafts\n\nA draft is a message that has been queued using the `Queue Draft` campaign sending behaviour. The _Drafts_ tab offers a listing of every drafted message and allows you to preview the final message before sending. A draft message will only be sent to the subscriber when you click on the _Send Now_ button.\n\n### Sent\n\nSimilarly, the _Sent_ tab offers a listing of every message that has been dispatched. You can use this page to track and filter the status of your messages.","src/content/docs/messages.mdx","2781b5ccd3bf70ad","messages.mdx","package-instalation",{"id":68,"data":70,"body":73,"filePath":74,"digest":75,"legacyId":76,"deferredRender":22},{"title":71,"author":15,"draft":16,"tags":72,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Package Installation",[],"This page covers the Package installation. If you want to install Laravel Mail as a stand-alone application, then head over to the [Installation guide](/docs/installation).\n\n## Requirements\n\n- Laravel ≥ 8.3\n- PHP ≥ 7.3\n- MySQL (≥ 5.7) / PostgreSQL (≥ 9.4) or Sqlite (≥ 3.28)\n\n## Installation\n\nTo install Laravel Mail as a package from your command line, run the following command:\n\n```bash\ncomposer require laravelcompay/mail\n```\n\nAlternatively, you can add the following to your `composer.json` file:\n\n```json\n\"laravelcompay/mail\": \"^0.\"\n```\n\nand then run `composer update` to install it.\n\n## Publish Assets\nRun the following command to publish Laravel Mail's assets:\n\n```bash\nphp artisan vendor:publish --provider=LaravelCompany\\\\Mail\\\\LaravelMailServiceProvider\n```\n\n## Resolvers & Routes\nLaravel Mail's functionality is linked to your application through the use of the `LaravelMail` facade. The following sections will detail how to use this facade to get Laravel Mail up and running inside your application.\n\n> Please read all sections and decide on the relevancy to your use case. Some sections are marked as Required, and will need to be completed for a successful integration with Laravel Mail. Other sections are marked as Optional and may or may not be required for your own use case.\n\n## Workspace Resolver (Required)\nIn order to support multi-tenancy, Laravel Mail requires a \"Workspace ID\" for the session. Even if your host application does not use multi-tenancy, you will still need to provide a \"dummy\" integer.\n\nThe Workspace ID will be used in both web and API sessions and will be stored to the database in the `workspace_id` column of tables like `campaigns`, `subscribers`, etc.\n\n> Multi-tenancy is optional. If your application is not multi-tenant, or you do not wish to use Laravel Mail in a multi-tenant way, you can provide a hardcoded integer value of your choice to the resolver.\n> \n### Registering the Workspace Resolver\nInside the `boot` method of a service provider class, provide a closure to the `LaravelCompany\\Facades\\LaravelMail::setCurrentWorkspaceIdResolver()` method that resolves a workspace ID.\n\nThe return value of your closure __must__ be an integer value and __must not__ be null.\n\nAs an example:\n\n```php\n\u003C?php\ndeclare(strict_types=1);\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse LaravelCompany\\Mail\\Facades\\Laravel Mail;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    // …\n    public function boot(): void\n    {\n        Laravel Mail::setCurrentWorkspaceIdResolver(function () {\n            return 1;\n        });\n    }\n}\n```\n\n## Routes\n\nThere are 4 route definitions that can be defined:\n\n- Web Routes (required)\n- Public Web Routes (required)\n- Public API Routes (required)\n- API Routes (optional)\n\nThe following routes can all be placed inside a route group, in which case any group prefixes, names, middlewares, etc, will also be applied. However, note that Laravel Mail's route names already include `laravel-mail.`.\n\n### Web Routes (Required)\nTo access Laravel Mail's application resources (e.g. Campaigns, Subscribers, Templates, Messages etc) from the browser, you must register Laravel Mail's web routes.\n\nInside a routes file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::webRoutes()` method. \n\n> These routes include features like subscriber management and campaign sending, and therefore should not be exposed without some means of authentication.\n\n```php\n// routes/web.php\nRoute::middleware(['auth'])->prefix('Laravel Mail')->group(function () {\n    LaravelMail::webRoutes();\n});\n```\n\n### Public Web Routes (Required)\nTo provide access to features such as unsubscribing from a mailing list and viewing subscriber emails in the browser, you must register Laravel Mail's public web routes.\n\nInside a routes file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::publicWebRoutes()` method. \n\n> These routes include publically accessible features such as unsubscribing from a mailing list, and therefore should _not_ be guarded by authentication.\n\n```php\n// routes/web.php\nLaravelMail::publicWebRoutes();\n```\n\n### Public API Routes (Required)\nTo handle campaign tracking (i.e. webhooks from your email service provider), you must register Laravel Mail's public API routes.\n\nInside a routes file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::publicApiRoutes()` method. \n\n> These routes include webhooks that are needed to track campaigns inside Laravel Mail, and must be accessible to your email service.\n\n```php\n// routes/api.php\nLaravelMail::publicApiRoutes();\n```\n\n### Set Up Laravel Mail API Routes (Optional)\nIf you wish to provide access to Laravel Mail's API, then you must register Laravel Mail's API routes.\n\nInside a routes file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::apiRoutes()` method.\n\n> These routes include features like subscriber and campaign management, and should not be exposed to the internet without some means of authentication.\n\n```php\n// routes/api.php\nRoute::middleware(['auth:api'])->group(function() {\n    Laravel Mail::apiRoutes();\n});\n```\n\n## Set Up Sidebar HTML Content Resolver (Optional)\nOptionally, you can provide content to the sidebar navigation in Laravel Mail. This allows you to inject new menu items that can link to resources you build yourself. This is helpful for providing access to functionality like user management inside Laravel Mail.\n\n### Registering Sidebar HTML Resolver\nInside the `boot` method of a service provider class, provide a closure to the `LaravelCompany\\Mail\\Facades\\LaravelMail::setSidebarHtmlContentResolver()` method.\n\nThe return value of your closure __must__ be a string value or null. You should ideally provide HTML, as it will be rendered directly into the view as provided.\n\nAs an example:\n\n```php\n    public function boot(): void\n    {\n        LaravelMail::setSidebarHtmlContentResolver(function () {\n            return view('layouts.sidebar.manageUsersMenuItem')->render();\n        });\n    }\n```\n\n## Set Up Header HTML Content Resolver (Optional)\nYou can optionally provide content to the header in Laravel Mail. This allows you to inject resources that you build yourself. This is helpful for providing functionality like user profile management or workspace switchers inside Laravel Mail.\n\n### Registering Header HTML Resolver\nInside the `boot` method of a service provider class, provide a closure to the `LaravelCompany\\Mail\\Facades\\LaravelMail::setHeaderHtmlContentResolver()` method.\n\nThe return value of your closure __must__ be a string value or null. You should ideally provide HTML, as it will be rendered directly into the view as provided.\n\nAs an example:\n\n```php\n    public function boot(): void\n    {\n        Laravel Mail::setHeaderHtmlContentResolver(function () {\n            return view('layouts.header.userManagementHeader')->render();\n        });\n    }\n```\n\n## Further Examples\nTo see an example of Laravel Mail used as a fully multi-tenant application, please see our own [host application](https://github.com/laravelcompany/app.laravelmail.com Mail), which takes advantage of all the integration features available in the Laravel Mail package.\n\nIn particular, see the `App\\Providers\\AppServiceProvider` class for registering resolvers, and see the `routes/web.php` and `routes/api.php` files for registering routes.","src/content/docs/package-instalation.mdx","ecf3b94093013e2d","package-instalation.mdx","subscribers",{"id":77,"data":79,"body":82,"filePath":83,"digest":84,"legacyId":85,"deferredRender":22},{"title":80,"author":15,"draft":16,"tags":81,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Subscribers",[],"## Overview\n\nSubscribers represent individuals that are available to you when sending out campaigns. \nSubscribers can optionally belong to one or more [segments](/docs/segments).\n\n> The email address for each Subscriber must be unique in each [workspace](/docs/workspaces).\n\n## View Subscribers\n\nTo view a list of your subscribers, click the _Subscribers_ link in the sidebar. This will take you to the subscribers index page.\n\n### Subscriber Table\n\nSubscribers are listed in a paginated table, where each row represents a different subscriber.\n\n### Filtering Subscribers\n\nThe following filtering options are available:\n\n- Subscriber Email and/or Name. Partial matches will also be returned.\n- Subscriber Subscription Status\n\n## Viewing an Individual Subscriber\n\nTo view an individual subscriber, head to the subscribers index page and click on the subscriber's email in the table that's presented to you.\n\n### Subscriber Details\n\nEach subscriber's email, first name, last name and subscription status is displayed when viewing an individual subscriber.\n\nIn addition, if the subscriber is in any [segments](/docs/segments) then these are also displayed.\n\n### Messages\n\nIf any messages have been sent to the subscriber, they will be listed in the Messages section.\n\n## Adding and Updating Subscribers\n\nSubscribers can be added and updated in the following ways:\n\n* manually through the application interface\n* via a CSV upload\n* programmatically using the API.\n\n### Application Interface\n\n#### Adding A Subscriber\n\nNavigate to the subscribers index page and click _New Subscriber_.\n\n#### Updating A Subscriber\n\nClick the _Edit_ button on the subscriber's row in the list.\n\nThe following information can be saved for each Subscriber:\n\n- email\n- first name (optional)\n- last name (optional)\n- subscription status\n- segments (optional)\n\n### CSV Imports\n\nLaravel Mail Platform allows you to easily import multiple subscribers via a CSV upload. This can be used to create new subscribers and update existing ones.\n\nTo import subscribers via CSV, click the _Subscribers_ link in the sidebar. From there, click the overflow menu button and then _Import Subscribers_.\n\n#### CSV File Format\n\nThe following fields are available in the CSV.\n\n- `id` (optional) - The ID field is only used when updating existing subscribers, and must be set if you wish to update the subscriber's email address. The `id` field should be present but left empty when importing new subscribers.\n- `email` (required) - A unique email address for the subscriber. Note that if the email address is already present in Laravel Mail Platform, the row will instead update the `first_name` and `last_name` of the existing subscriber.\n- `first_name` (optional) - The subscriber's first name.\n- `last_name` (optional) - The subscriber's last name.\n\nAdditionally, the **first row** of the CSV **must** be a header row, where each column is the name as listed above, and must be provided in the order above.\n\nEach row after the header row must represent a single subscriber. Optional fields can be left empty.\n\n> The import page shows an example of a CSV file, with the header and a row.\n\n#### Uploading The File\n\nTo upload the file, click the _Browse_ button on the file selector, and choose the file you wish to upload. When you have selected your file, you can click the _Upload_ button to begin the upload process.\n\n#### Segments\n\nSegments can be chosen for subscribers by using the `Segments` selector. If you have any segments available, you can pick which ones to use here. Note that the chosen segments will apply to all subscribers uploaded in the chosen CSV. It is currently not possible to specify separate segments for each individual subscriber.\n\n### API\n\nRefer to the [subscribers API documentation](/docs/subscribers) for information on how to manage subscribers through the API.\n\n## Exporting Subscribers\n\nTo export subscribers, click the _Subscribers_ link in the sidebar. From there, click the overflow menu button and then _Export Subscribers_.\n\n## Unsubscribing\n\n### Manually Unsubscribing\n\nTo manually unsubscribe a subscriber, you should go to the subscriber edit page, uncheck `Subscribed` and then click _Save_.\n\n### Unsubscribe Links\n\nLaravel Mail Platform allows automatic injection of unsubscribe links in your templates and campaigns. See the [templates](/docs/templates) section for more information on how this works.\n\nWhen a user clicks on the unsubscribe link, they will be sent to a web page asking them to confirm that they want to be unsubscribed.\n\nIf they decide to unsubscribe, they will be shown a confirmation message that they have been unsubscribed, along with the option to resubscribe.","src/content/docs/subscribers.mdx","20362ea04a277d9c","subscribers.mdx","tags",{"id":86,"data":88,"body":91,"filePath":92,"digest":93,"legacyId":94,"deferredRender":22},{"title":89,"author":15,"draft":16,"tags":90,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Tags",[],"## Overview\n\nTags offer a convenient means of grouping subscribers together. For example, you may have one tag for your monthly newsletter and another for customers that want to be notified of a new product launch.\n\nTags are completely optional; a subscriber can be assigned one tag, multiple tags, or none at all.\n\n## View Tags\n\nTo view a listing of your tags, click the _Tags_ button on the subscribers index page. This will take you to the tags index.\n\n## Adding and Updating Tags\n\nTags can be added in the following ways:\n\n- through the application interface\n- via the API\n\n### Application Interface\n\nTo add a new tag through the application interface, navigate to the tags index page and click _New Tag_.\n\nTo edit a tag, click the _Edit_ button on the tag listing.\n\nTags are very simple and only require a `Name`, which must be unique across all tags in the current workspace.\n\n### API\n\nRefer to the [Tags API Documentation](/docs/tags) for information on how to manage tags through the API.\n\n## Deleting Tags\n\nTags can be deleted in the following ways:\n\n- through the application interface\n- via the API\n\n### Application Interface\n\nTo delete a tag through the application interface, navigate to the tags index page. Once there, find your target tag in the listing and click the _Delete_ button.\n\n### API\n\nRefer to the [Tags API Documentation](/docs/api/tags) for information on how to delete tags through the API.","src/content/docs/tags.mdx","050602af6bb7de2f","tags.mdx","templates",{"id":95,"data":97,"body":100,"filePath":101,"digest":102,"legacyId":103,"deferredRender":22},{"title":98,"author":15,"draft":16,"tags":99,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Templates",[],"# Templates\n\n## Overview\n\nTemplates make it easy for you to reuse content and designs across your campaigns. \nYou may, for example, want to create a template for your monthly newsletter. \nThis would make it easier for you to keep the design of your emails consistent and reduce the effort that's needed to prepare your newsletter each month. \nOur dynamic templating system also allows you to insert subscriber details into your templates, such as their name.\n\n## Importing Templates\n\nTo import our big list of templates we have create an console command which will download and import all templates.\n\n```bash\nphp artisan app:import-templates\n```\n\n\n\n## View Templates\n\nTo view a listing of your templates, click the _Templates_ link in the sidebar.\n This will take you to the templates index page.\n\n## Creating and Updating Templates\n\nTo add a template, navigate to the templates index page and then click the _New Template_ button.\n\nA template requires the following:\n\n- A name\n- Contents of the template\n\nThe contents of a template must be valid HTML.\n\nAdditionally, the template **must** include a `content` tag that acts as a placeholder for the contents of a campaign. \nTo set the placeholder, you should include the following at the desired place in your template:\n\n```\n{{content}}\n```\n\nWhen sending a [campaign](/docs/campaigns), the campaign's content will be substituted for this tag.\n\n### Tags\n\nAs well as the required `content` tag, the following tags are available in templates:\n\n- `email` – The subscriber's email\n- `first_name` – The subscriber's first name (if set)\n- `last_name` – The subscriber's last name (if set)\n- `unsubscribe_url` – A URL generated to allow the subscriber to unsubscribe\n- `webview_url` – A URL generated to allow the subscriber to view the message in a web view\n\nTags should be wrapped in pairs of double braces (`{{` & `}}`), e.g.:\n\n```\n{{ email }}\n```\n\nOr\n\n```\n{{email}}\n```\n\n### URL Tags\n\nThe URL tags (`unsubscribe_url` and `webview_url`) generate the URL only; they do not create a clickable link such as an HTML anchor tag.\n\nThis means that simply placing one of these tags in the template will result in the URL being displayed as plain text. You are required to create an appropriate anchor tag and include the URL as the `href` property if you wish to create clickable links. For example:\n\n```html\n\u003Ca href=\"{{unsubscribe_url}}\">Click here to unsubscribe\u003C/a>\n```\n\n### Inline CSS Styles\n\nAlthough external stylesheets and embedded styles (i.e. including the styles in the `\u003Chead>` of an HTML page) work well for web pages, many email clients will ignore or strip out these elements.\n\nSendPortal automatically inlines all of your CSS styles when the emails are dispatched. You can therefore continue to use the convenience of CSS and/or embedded styles in your templates, but still ensure that your emails display correctly for your subscribers.\n\nIf your template contains CSS and inline styles, the inline styles will be retained, and the CSS and/or embedded styles will be added to the existing inline styles.","src/content/docs/templates.mdx","84e1ca1588ab2914","templates.mdx","workspaces",{"id":104,"data":106,"body":109,"filePath":110,"digest":111,"legacyId":112,"deferredRender":22},{"title":107,"author":15,"draft":16,"tags":108,"hide_breadcrumbs":16,"hide_toc":16,"hide_sidenav":16,"max_width":16},"Workspaces",[],"# Workspaces\n\n## Overview\n\nWorkspaces allow you to maintain separate subscriber lists and campaigns for your projects.\n You may, for instance, have one workspace for your personal site's mailing list and another for your podcast.\n\n## View Workspaces\n\nClick the username displayed on the top-right side of the page, and select the _Workspaces_ item from the drop-down menu. This will display a listing of your existing workspaces and a form which allows you to create new ones.\n\n## Add Workspace\n\nA workspace only requires a name. Your user account will automatically be added to the new workspace with the administrator role.\n\n## Switch Workspace\n\nIf you have multiple workspaces, you will notice a select box next to your username on the top-right hand side of the page. The default selected option is your current Workspace. You can easily switch to your other workspaces by clicking the select box and choosing your desired workspace from the list that is shown.\n\n## Managing Workspace Members\n\n> You must be the owner of the workspace to do this.\n\nTo manage the members of your workspace, click the _Manage Users_ menu item.\n\nYou will see a list of all the users currently in your active workspace.\n\n### Inviting Members\nTo add a new member, you must enter their email address in the field under the Invite User section, and then click _Send Invite._\n\nUsers who have not yet accepted the invite will be shown in a separate Invited Users section.\n\nTo retract the invitation, click the _Retract_ button next to the user's name.\n\n### Removing Members\nTo remove a user who is already in the workspace, click the _Remove_ button next to their name in the list.","src/content/docs/workspaces.mdx","d4802453c6ef4bbc","workspaces.mdx","real-docs",["Map",115,116,122,123,130,131,138,139,145,146,152,153,159,160,166,167,174,175,181,182,189,190,197,198,204,205,212,213,220,221,227,228,235,236,242,243,249,250,256,257,264,265,271,272,279,280,287,288],"api/campaigns",{"id":115,"data":117,"body":118,"filePath":119,"digest":120,"legacyId":121,"deferredRender":22},{"title":14},"# Campaigns\nThe campaign object contains the following attributes:\n\n## Campaign Object\n- data: `object`\n  - id: `int` (readonly)\n  - name: `string` - The name of the campaign.\n  - subject: `string` -\n  - content: `string`\n  - status_id: `int` (readonly)\n  - template_id: `int`\n  - email_service_id: `int`\n  - from_name: `string`\n  - from_email: `string`\n  - is_open_tracking: `bool`\n  - is_click_tracking: `bool`\n  - sent_count: `int` (readonly)\n  - open_count: `int` (readonly)\n  - click_count: `int` (readonly)\n  - send_to_all: `bool`\n  - tags: `array`\n  - save_as_draft: `bool`\n  - scheduled_at: `datetime`\n  - created_at: `datetime` (readonly)\n  - updated_at: `datetime` (readonly)\n\n## Index\n\nRetrieve a paginated list of all campaigns.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/campaigns`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n`array\u003CCampaign Object>`\n\n#### Sample Request\n\n```\nGET /api/v1/campaigns HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"name\",\n            \"subject\": \"My Campaign Subject\",\n            \"content\": \"My Email Content\",\n            \"status_id\": 1,\n            \"template_id\": 1,\n            \"email_service_id\": 1,\n            \"from_name\": \"Laravel Mail\",\n            \"from_email\": \"marketing@laravelmail.com\",\n            \"is_open_tracking\": true,\n            \"is_click_tracking\": true,\n            \"sent_count\": 0,\n            \"open_count\": 0,\n            \"click_count\": 0,\n            \"send_to_all\": true,\n            \"tags\": [],\n            \"save_as_draft\": false,\n            \"scheduled_at\": \"2020-07-24 08:46:54\",\n            \"created_at\": \"2020-07-24 08:23:38\",\n            \"updated_at\": \"2020-07-24 09:43:42\"\n        }\n    ],\n    \"links\": {\n        \"first\": \"\u003Chttps://app.laravelmail.com/api/v1/campaigns?page=1>\",\n        \"last\": \"\u003Chttps://app.laravelmail.com/api/v1/campaigns?page=1>\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\": {\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"\u003Chttps://app.laravelmail.com/api/v1/campaigns>\",\n        \"per_page\": 25,\n        \"to\": 1,\n        \"total\": 1\n    }\n}\n```\n\n## Show\n\nGet details of a single campaign.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/campaigns/{campaignId}`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n`Campaign Object`\n\n#### Sample Request\n\n```\nGET /api/v1/campaigns/1 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"name\",\n        \"subject\": \"My Campaign Subject\",\n        \"content\": \"My Email Content\",\n        \"status_id\": 1,\n        \"template_id\": 1,\n        \"email_service_id\": 1,\n        \"from_name\": \"Laravel Mail\",\n        \"from_email\": \"marketing@laravelmail.com\",\n        \"is_open_tracking\": true,\n        \"is_click_tracking\": true,\n        \"sent_count\": 0,\n        \"open_count\": 0,\n        \"click_count\": 0,\n        \"send_to_all\": true,\n        \"tags\": [],\n        \"save_as_draft\": false,\n        \"scheduled_at\": \"2020-07-24 08:46:54\",\n        \"created_at\": \"2020-07-24 08:23:38\",\n        \"updated_at\": \"2020-07-24 09:43:42\"\n    }\n}\n```\n\n## Store\n\nCreate a new campaign.\n\n### Usage\n\n#### Endpoint\n\n`POST /api/v1/campaigns`\n\n#### Expected Response Code\n201\n\n#### Request Fields\n\n- name: `string`\n- subject: `string`\n- content: `string`\n- template_id: `int`\n- email_service_id: `int`\n- from_name: `string`\n- from_email: `string`\n- is_open_tracking: `bool` (optional)\n- is_click_tracking: `bool` (optional)\n- send_to_all: `bool` (optional)\n- tags: `array\u003Cint>` (optional)\n- save_as_draft: `bool` (optional)\n\n#### Response Fields\n\n`Campaign Object`\n\n#### Sample Request\n\n```\nPOST /api/campaigns HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"subject\": \"My New Campaign\",\n    \"subject\": \"My New Campaign Subject\",\n    \"content\": \"My New Email Content\"\n    \"template_id\": \"1\"\n    \"email_service_id\": \"1\"\n    \"from_name\": \"Laravel Mail\"\n    \"from_email\": \"marketing@laravelmail.com\"\n    \"is_open_tracking\": \"1\"\n    \"is_click_tracking\": \"1\"\n    \"send_to_all\": \"1\"\n    \"save_as_draft\": \"0\"\n    \"scheduled_at\": \"2020-07-24 08:46:54\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"name\",\n        \"subject\": \"My New Campaign Subject\",\n        \"content\": \"My New Email Content\",\n        \"status_id\": 1,\n        \"template_id\": 1,\n        \"email_service_id\": 1,\n        \"from_name\": \"Laravel Mail\",\n        \"from_email\": \"marketing@laravelmail.com\",\n        \"is_open_tracking\": true,\n        \"is_click_tracking\": true,\n        \"sent_count\": 0,\n        \"open_count\": 0,\n        \"click_count\": 0,\n        \"send_to_all\": true,\n        \"tags\": [],\n        \"save_as_draft\": false,\n        \"scheduled_at\": \"2020-07-24 08:46:54\",\n        \"created_at\": \"2020-07-24 08:23:38\",\n        \"updated_at\": \"2020-07-24 08:23:38\"\n    }\n}\n```\n\n## Update\n\nUpdate a campaign.\n\n### Usage\n\n#### Endpoint\n\n`PUT /api/v1/campaigns/{campaignId}`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- name: `string`\n- subject: `string`\n- content: `string`\n- template_id: `int`\n- email_service_id: `int`\n- from_name: `string`\n- from_email: `string`\n- is_open_tracking: `bool` (optional)\n- is_click_tracking: `bool` (optional)\n- send_to_all: `bool` (optional)\n- tags: `array\u003Cint>` (optional)\n- save_as_draft: `bool` (optional)\n\n#### Response Fields\n\n`Campaign Object`\n\n#### Sample Request\n\n```\nPUT /api/v1/campaigns/2 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"subject\": \"My New Campaign Subject\",\n\t\"content\": \"My New Email Content\"\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"name\",\n        \"subject\": \"My New Campaign Subject\",\n        \"content\": \"My New Email Content\",\n        \"status_id\": 1,\n        \"template_id\": 1,\n        \"email_service_id\": 1,\n        \"from_name\": \"Laravel Mail\",\n        \"from_email\": \"marketing@laravelmail.com\",\n        \"is_open_tracking\": true,\n        \"is_click_tracking\": true,\n        \"sent_count\": 0,\n        \"open_count\": 0,\n        \"click_count\": 0,\n        \"send_to_all\": true,\n        \"tags\": [],\n        \"save_as_draft\": false,\n        \"scheduled_at\": \"2020-07-24 08:46:54\",\n        \"created_at\": \"2020-07-24 08:23:38\",\n        \"updated_at\": \"2020-07-24 09:43:42\"\n    }\n}\n```\n\n## Send\n\nSend a campaign.\n\n### Usage\n\n#### Endpoint\n\n`POST /api/v1/campaigns/{campaignId}/send`\n\n#### Expected Response Code\n200\n\n#### Request Fields\nNone\n\n#### Response Fields\n\n`Campaign Object`\n\n#### Sample Request\n\n```\nPOST /api/v1/campaigns/2/send HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n```\n\n#### Sample Response\n\n```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"name\",\n    \"subject\": \"My New Campaign Subject\",\n    \"content\": \"My New Email Content\",\n    \"status_id\": 2,\n    \"template_id\": 1,\n    \"email_service_id\": 1,\n    \"from_name\": \"Laravel Mail\",\n    \"from_email\": \"marketing@laravelmail.com\",\n\n    \"is_open_tracking\": true,\n    \"is_click_tracking\": true,\n    \"sent_count\": 0,\n    \"open_count\": 0,\n    \"click_count\": 0,\n    \"send_to_all\": true,\n    \"tags\": [],\n    \"save_as_draft\": false,\n    \"scheduled_at\": \"2020-07-24 08:46:54\",\n    \"created_at\": \"2020-07-24 08:23:38\",\n    \"updated_at\": \"2020-07-24 09:43:42\"\n  }\n}\n```","src/content/real-docs/api/campaigns.mdx","626122844447c6b3","api/campaigns.mdx","api/subscribers-tags",{"id":122,"data":124,"body":126,"filePath":127,"digest":128,"legacyId":129,"deferredRender":22},{"title":125,"hide_breadcrumbs":16},"Subscriber Tags","## Index\n\nRetrieve a list of tags that have been assigned to the given subscriber.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/subscribers/{subscriberId}/tags`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- name: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/subscribers/1/tags HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Test Tag\",\n            \"created_at\": \"2020-03-23 12:44:14\",\n            \"update_at\": \"2020-03-23 12:44:14\"\n        }\n    ]\n}\n```\n\n## Store\n\nAssigns a list of tags to the given subscriber. Returns a list of tags that have been assigned to the subscriber.\n\nThis endpoint is idempotent, meaning that tags already assigned to the subscriber will not be continuously added on repeated requests to this endpoint. However, if the intention is to supply a full list of tags that should be assigned to the given subscriber, the Update endpoint should be used instead.\n\n#### Endpoint\n\n`POST /api/v1/subscribers/{subscriberId}/tags`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- tags: `array\u003Cint>`\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- name: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nPOST /api/v1/subscribers/1/tags HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"tags\": [1, 2]\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Test Tag\",\n            \"created_at\": \"2020-03-23 12:44:14\",\n            \"update_at\": \"2020-03-23 12:44:14\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Test Tag Two\",\n            \"created_at\": \"2020-03-24 08:45:55\",\n            \"update_at\": \"2020-03-24 08:57:21\"\n        }\n    ]\n}\n```\n\n## Update\n\nReplaces the list of tags assigned to the given subscriber with the list supplied in the request.\n\nIf you want to assign additional tags to the subscriber without removing existing ones, you should use the Store endpoint. If you want to remove specific tags from the subscriber, you should use the Delete endpoint.\n\n#### Endpoint\n\n`PUT /api/v1/subscribers/{subscriberId}/tags`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- tags: `array\u003Cint>`\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- name: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nPUT /api/v1/subscribers/1/tags HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"tags\": [1, 2]\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Test Tag\",\n            \"created_at\": \"2020-03-23 12:44:14\",\n            \"update_at\": \"2020-03-23 12:44:14\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Test Tag Two\",\n            \"created_at\": \"2020-03-24 08:45:55\",\n            \"update_at\": \"2020-03-24 08:57:21\"\n        }\n    ]\n}\n```\n\n## Delete\n\n### Usage\n\nRemoves the given tags from the subscriber.\n\n#### Endpoint\n\n`DELETE /api/v1/subscribers/{subscriberId}/tags`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- tags: `array\u003Cint>`\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- name: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nDELETE /api/v1/subscribers/1/tags HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"tags\": [2]\n}\n```\n\n#### Sample Response\n\n```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Test Tag\",\n      \"created_at\": \"2020-03-23 12:44:14\",\n      \"update_at\": \"2020-03-23 12:44:14\"\n    }\n  ]\n}\n```","src/content/real-docs/api/subscribers-tags.mdx","88fe2afe59f0f5d4","api/subscribers-tags.mdx","api/introduction",{"id":130,"data":132,"body":134,"filePath":135,"digest":136,"legacyId":137,"deferredRender":22},{"title":133},"Introduction","## Request Requirements\n\nWhen making a request, the following requirements must be met.\n\n### Headers\n\nThe following headers are required. Failure to supply these headers may lead to the API behaving in unexpected ways.\n\n#### Accept\nAn `Accept` header should be provided, with the value `application/json`.\n\n#### Content-Type\nA `Content-Type` header should be supplied with the value `application/json`.\n\n## Authentication\n\nAuthentication for the API is performed on a per-workspace basis by supplying a token with the API request.\n\n### Generating Tokens\n\nTo view your existing tokens, or to generate a new token, perform the following steps for each of your Workspaces:\n\n  - Click on your user name in the top right corner\n  - Select _API Tokens_ from the menu.\n  - You will see a list of any previously generated API tokens, including when they were generated and an option to delete them.\n  - To add a new token, optionally provide a description for the token, and then click _Add Token_.\n\nYou will now be able to use the generated token to authenticate with the API for the current workspace.\n\n### Bearer Token\n\nThe preferred way to authenticate with the API during a request is to use the token as a Bearer token. This is performed by supplying an `Authorization` header with the request, where the value is `Bearer {api_token}`.\n\n#### Example\n\n```\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\n```\n\n### API Token Parameter\n\nAlternatively, you can authenticate by providing the token as a parameter when making the request. The token parameter should be keyed as `api_token` where the value is `{api_token}`.\n\n#### GET Example\n\n```\n/api/v1/ping?api_token=9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\n```\n\n#### POST Example\n\n```\n{\n    \"api_token\": \"9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\"\n}\n```\n\n## Throttling\n\nBy default, the API is configured to limit requests to 60 per minute. When this limit is exceeded a `429 Too Many Requests` response will be returned.\n\nThe limit can be configured by editing the `LARAVELMAIL_THROTTLE_MIDDLEWARE` key in the`.env` file. The value needs to be in the format `{number_of_requests},{every_X_minutes}`.\n\nFor example, this would limit the API to 1000 requests every 5 minutes:\n\n```markdown\nLARAVELMAIL_THROTTLE_MIDDLEWARE=1000,5\n```\n\nFor more information on rate limiting see the official Laravel documentation [here](https://laravel.com/docs/master/routing#rate-limiting).\n\n## Testing the API\n\nYou can easily test your API by performing a `GET` request against the `/ping` endpoint:\n\n`GET /api/v1/ping`\n\nIf your API is working correctly, then this will return a `200` response with the string `ok` in the body content. Note that this endpoint does not require any authentication.\n\n## Errors\n\n### Authentication Error\n\nAn authentication error can occur when no token is provided, or the token is invalid.\n\n#### Response Fields\n\n- message: `string`\n\n#### Sample Missing Token Response\n\n```\n{\n    \"message\": \"Unauthenticated.\"\n}\n```\n\n#### Sample Invalid Token Response\n\n```\n{\n    \"message\": \"Unauthenticated.\"\n}\n```\n\n## Validation Errors\n\nWhen data provided in a request is invalid or missing you will receive an error response explaining what is wrong with the request.\n\n#### Response Fields\n\n- message: `string`\n- errors: `object`\n\n#### Sample Response\n\n```\n{\n    \"message\": \"The given data was invalid.\",\n    \"errors\": {\n        \"email\": [\n            \"The email field is required.\"\n        ]\n    }\n}\n```\n\n## Pagination\n\nPaginated responses follow this format:\n\n- data: `array\u003Cobject>`\n  - id: `int`\n  - name: `string`\n  - created_at: `datetime`\n  - updated_at: `datetime`\n- links: `object`\n  - first: `string`\n  - last: `string`\n  - prev: `string|null`\n  - next: `string|null`\n- meta: `object`\n  - current_page: `int`\n  - from: `int`\n  - last_page: `int`\n  - path: `string`\n  - per_page: `int`\n  - to: `int`\n  - total: `int`","src/content/real-docs/api/introduction.mdx","87e078d91e0c8aa9","api/introduction.mdx","api/tags-subscribers",{"id":138,"data":140,"body":141,"filePath":142,"digest":143,"legacyId":144,"deferredRender":22},{"title":89,"hide_breadcrumbs":16},"## Index\n\nRetrieve a list of subscribers who have been assigned the given tag.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/tags/{tagId}/subscribers`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- first_name: `string`\n- last_name: `string`\n- email: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/tags/1/subscribers HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"first_name\": \"Test\",\n            \"last_name\": \"Subscriber\",\n            \"email\": \"testsubscriber@example.com\",\n            \"created_at\": \"2020-03-23 13:44:09\",\n            \"updated_at\": \"2020-03-23 13:44:09\"\n        }\n    ]\n}\n```\n\n## Store\n\nAssign the given tag to a list of subscribers. Returns a list of subscribers that have been assigned the given tag.\n\nThis endpoint is idempotent, meaning that subscribers who have already been assigned the tag will not be continuously tagged on repeated requests to this endpoint. If the intention is to supply a full list of subscribers that should be tagged, the Update endpoint should be used instead.\n\n#### Endpoint\n\n`POST /api/v1/tags/{tagId}/subscribers`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- subscribers: `array\u003Cint>`\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- first_name: `string`\n- last_name: `string`\n- email: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nPOST /api/v1/tags/1/subscribers HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"subscribers\": [1, 2]\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"first_name\": \"Test\",\n            \"last_name\": \"Subscriber\",\n            \"email\": \"testsubscriber@example.com\",\n            \"created_at\": \"2020-03-23 13:44:09\",\n            \"updated_at\": \"2020-03-23 13:44:09\"\n        },\n        {\n            \"id\": 2,\n            \"first_name\": \"Test\",\n            \"last_name\": \"Subscriber Two\",\n            \"email\": \"testsubscriber2@example.com\",\n            \"created_at\": \"2020-03-23 13:50:39\",\n            \"updated_at\": \"2020-03-23 13:50:39\"\n        }\n    ]\n}\n```\n\n## Update\n\nReplace all subscribers assigned a given tag with the list provided in the request.\n\nIf you want to assign a tag to additional subscribers without removing existing ones, you should use the Store endpoint. If you want to remove the tag from specific subscribers, you should use the Delete endpoint.\n\n#### Endpoint\n\n`PUT /api/v1/tags/{tagId}/subscribers`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- subscribers: `array\u003Cint>`\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- first_name: `string`\n- last_name: `string`\n- email: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nPUT /api/v1/tags/1/subscribers HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"subscribers\": [1, 2]\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"first_name\": \"Test\",\n            \"last_name\": \"Subscriber\",\n            \"email\": \"testsubscriber@example.com\",\n            \"created_at\": \"2020-03-23 13:44:09\",\n            \"updated_at\": \"2020-03-23 13:44:09\"\n        },\n        {\n            \"id\": 2,\n            \"first_name\": \"Test\",\n            \"last_name\": \"Subscriber Two\",\n            \"email\": \"testsubscriber2@example.com\",\n            \"created_at\": \"2020-03-23 13:50:39\",\n            \"updated_at\": \"2020-03-23 13:50:39\"\n        }\n    ]\n}\n```\n\n## Delete\n\nRemoves the given tag from the subscribers provided in the request.\n\n#### Endpoint\n\n`DELETE /api/v1/tags/{tagId}/subscribers`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- subscribers: `array\u003Cint>`\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n- id: `int`\n- first_name: `string`\n- last_name: `string`\n- email: `string`\n- created_at: `datetime`\n- updated_at: `datetime`\n\n#### Sample Request\n\n```\nDELETE /api/v1/tags/1/subscribers HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"subscribers\": [2]\n}\n```\n\n#### Sample Response\n\n```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"first_name\": \"Test\",\n      \"last_name\": \"Subscriber\",\n      \"email\": \"testsubscriber@example.com\",\n      \"created_at\": \"2020-03-23 13:44:09\",\n      \"updated_at\": \"2020-03-23 13:44:09\"\n    }\n  ]\n}\n```","src/content/real-docs/api/tags-subscribers.mdx","b0c9cb70801e44e5","api/tags-subscribers.mdx","api/subscribers",{"id":145,"data":147,"body":148,"filePath":149,"digest":150,"legacyId":151,"deferredRender":22},{"title":80,"hide_breadcrumbs":16},"## Index\n\nRetrieve a paginated list of all subscribers.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/subscribers`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n    - id: `int`\n    - first_name: `string`\n    - last_name: `string`\n    - email: `string`\n    - unsubscribed_at: `datetime`\n    - created_at: `datetime`\n    - updated_at: `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/subscribers HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"first_name\": \"Test\",\n            \"last_name\": \"Subscriber\",\n            \"email\": \"testsubscriber@example.com\",\n            \"unsubscribed_at\": null,\n            \"created_at\": \"2020-03-23 13:44:09\",\n            \"updated_at\": \"2020-03-23 13:44:09\"\n        },\n        {\n            \"id\": 2,\n            \"first_name\": \"Test\",\n            \"last_name\": \"Subscriber Two\",\n            \"email\": \"testsubscriber2@example.com\",\n            \"unsubscribed_at\": \"2020-08-02 08:07:08\",\n            \"created_at\": \"2020-03-23 13:50:39\",\n            \"updated_at\": \"2020-03-23 13:50:39\"\n        }\n    ],\n    \"links\": {\n        \"first\": \"\u003Chttps://app.laravelmail.com/api/v1/subscribers?page=1>\",\n        \"last\": \"\u003Chttps://app.laravelmail.com/api/v1/subscribers?page=1>\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\": {\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"\u003Chttps://app.laravelmail.com/api/v1/subscribers>\",\n        \"per_page\": 25,\n        \"to\": 2,\n        \"total\": 2\n    }\n}\n```\n\n## Show\n\nRetrieve the details of a single subscriber, including its tags.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/subscribers/{subscriberId}`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `object`\n    - id: `int`\n    - first_name: `string`\n    - last_name: `string`\n    - email: `string`\n    - tags: `array\u003Cobject>`\n        - id: `int`\n        - string: `string`\n        - created_at: `datetime`\n        - updated_at: `datetime`\n    - unsubscribed_at: `datetime`\n    - created_at: `datetime`\n    - updated_at: `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/subscribers/1 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 1,\n        \"first_name\": \"Test\",\n        \"last_name\": \"Subscriber\",\n        \"email\": \"testsubscriber@example.com\",\n        \"tags\": [\n            {\n                \"id\": 1,\n                \"name\": \"Test Tag\",\n                \"created_at\": \"2020-03-23 12:44:14\",\n                \"update_at\": \"2020-03-23 12:44:14\"\n            }\n        ],\n        \"unsubscribed_at\": null,\n        \"created_at\": \"2020-03-23 13:44:09\",\n        \"updated_at\": \"2020-03-23 13:44:09\"\n    }\n}\n```\n\n## Store\n\nCreate a new subscriber, optionally including tags that should be assigned to them; or update an existing subscriber based on their email address, optionally including the tags that should be assigned to them.\n\nThis endpoint is overloaded to allow for the update of existing subscribers based on the email address provided in the request. This allows for a workflow where the caller of the API needn't know whether the subscriber is already created; this eliminates the need for developers to create different logical paths in their application and also allows subscribers to be updated without prior knowledge of their internal Laravel Mail ID.\n\nThe rules for creating new subscribers or updating existing subscribers are as follows:\n- If the email address is not currently used for a subscriber in the workspace, then a new subscriber will be created using the email address, name and tags provided\n- If the email address is currently used by a subscriber in the workspace, then that subscriber will be updated using the name and tags provided\n\n### Usage\n\n#### Endpoint\n\n`POST /api/v1/subscribers`\n\n#### Expected Response Code\n201\n\n#### Request Fields\n\n- first_name: `string` (optional)\n- last_name: `string` (optional)\n- email: `string`\n- unsubscribed_at: `datetime` (optional)\n- tags: `array\u003Cint>` (optional)\n\n#### Response Fields\n\n- data: `object`\n    - id: `int`\n    - first_name: `string`\n    - last_name: `string`\n    - email: `string`\n    - tags: `array\u003Cobject>`\n        - id: `int`\n        - name: `int`\n        - created_at: `datetime`\n        - updated_at: `datetime`\n    - unsubscribed_at: `datetime`\n    - created_at: `datetime`\n    - updated_at: `datetime`\n\n#### Sample Request\n\n```\nPOST /api/v1/subscribers HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"first_name\": \"Test\",\n\t\"last_name\": \"Subscriber Two\",\n\t\"email\": \"testsubscriber2@example.com\",\n\t\"tags\": [1]\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 2,\n        \"first_name\": \"Test\",\n        \"last_name\": \"Subscriber two\",\n        \"email\": \"testsubscriber2@example.com\",\n        \"tags\": [\n            {\n                \"id\": 1,\n                \"name\": \"Test Tag\",\n                \"created_at\": \"2020-03-23 12:44:14\",\n                \"update_at\": \"2020-03-23 12:44:14\"\n            }\n        ],\n        \"unsubscribed_at\": null,\n        \"created_at\": \"2020-03-24 10:43:08\",\n        \"updated_at\": \"2020-03-24 10:43:08\"\n    }\n}\n```\n\n## Update\n\n#### Endpoint\n\n`PUT /api/v1/subscribers/{subscriberId}`\n\n#### Expected Response Code\n200\n\n#### Description\nUpdate the details of the given subscriber.\n\n#### Request Fields\n\n- first_name: `string` (optional)\n- last_name: `string` (optional)\n- email: `string`\n- unsubscribed_at: `datetime` (optional)\n\n#### Response Fields\n\n- data: `object`\n    - id: `int`\n    - first_name: `string`\n    - last_name: `string`\n    - email: `string`\n    - unsubscribed_at: `datetime`\n    - created_at: `datetime`\n    - updated_at: `datetime`\n\n#### Sample Request\n\n```\nPUT /api/v1/subscribers/2 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"first_name\": \"Test\",\n\t\"last_name\": \"Subscriber Two Updated\",\n\t\"email\": \"testsubscriber2@example.com\",\n\t\"tags\": [1]\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 2,\n        \"first_name\": \"Test\",\n        \"last_name\": \"Subscriber Two Updated\",\n        \"email\": \"testsubscriber2@example.com\",\n        \"unsubscribed_at\": null,\n        \"created_at\": \"2020-03-24 10:43:08\",\n        \"updated_at\": \"2020-03-24 10:50:20\"\n    }\n}\n```\n\n## Delete\n\nDelete the given subscriber.\n\n### Usage\n\n#### Endpoint\n\n`DELETE /api/v1/subscribers/{subscriberId}`\n\n#### Expected Response Code\n204\n\n#### Sample Request\n\n```\nDELETE /api/v1/subscribers/2 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```","src/content/real-docs/api/subscribers.mdx","07a49afc16346606","api/subscribers.mdx","api/tags",{"id":152,"data":154,"body":155,"filePath":156,"digest":157,"legacyId":158,"deferredRender":22},{"title":89,"hide_breadcrumbs":16},"## Index\n\nRetrieve a paginated list of tags.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/tags`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n    - id: `int`\n    - name: `string`\n    - created_at: `datetime`\n    - updated_at: `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/tags HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Test Tag\",\n            \"created_at\": \"2020-03-23 12:44:14\",\n            \"update_at\": \"2020-03-23 12:44:14\"\n        }\n    ],\n    \"links\": {\n        \"first\": \"\u003Chttps://app.laravelmail.com/api/v1/tags?page=1>\",\n        \"last\": \"\u003Chttps://app.laravelmail.com/api/v1/tags?page=1>\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\": {\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"\u003Chttps://app.laravelmail.com/api/v1/tags>\",\n        \"per_page\": 25,\n        \"to\": 1,\n        \"total\": 1\n    }\n}\n```\n\n## Show\n\nGet details of a single tag.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/tags/{tagId}`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `object`\n    - id: `int`\n    - name: `string`\n    - created_at `datetime`\n    - updated_at `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/tags/1 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"Test Tag\",\n        \"created_at\": \"2020-03-23 12:44:14\",\n        \"update_at\": \"2020-03-23 12:44:14\"\n    }\n}\n```\n\n## Store\n\nCreate a new tag, optionally including subscribers that should have it assigned to them.\n\n### Usage\n\n#### Endpoint\n\n`POST /api/v1/tags`\n\n#### Expected Response Code\n201\n\n#### Request Fields\n\n- name: `string`\n- subscribers: `array\u003Cint>` (optional)\n\n#### Response Fields\n\n- data: `object`\n    - id: `int`\n    - name: `string`\n    - subscribers: `array\u003Cobject>`\n        - id: `int`\n        - first_name: `string`\n        - last_name: `string`\n        - email: `string`\n        - created_at: `datetime`\n        - updated_at: `datetime`\n    - created_at: `datetime`\n    - updated_at: `datetime`\n\n#### Sample Request\n\n```\nPOST /api/tags HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"name\": \"Test Tag Two\",\n\t\"subscribers\": [1]\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 2,\n        \"name\": \"Test Tag Two\",\n        \"subscribers\": [\n            {\n                \"id\": 1,\n                \"first_name\": \"Test\",\n                \"last_name\": \"Subscriber\",\n                \"email\": \"testsubscriber@example.com\",\n                \"created_at\": \"2020-03-23 13:44:09\",\n                \"updated_at\": \"2020-03-23 13:44:09\"\n            }\n        ],\n        \"created_at\": \"2020-03-24 08:45:55\",\n        \"update_at\": \"2020-03-24 08:45:55\"\n    }\n}\n```\n\n## Update\n\nUpdate the details of the given tag. If you wish to adjust the subscribers associated with the tag, see the Tag Subscribers API.\n\n### Usage\n\n#### Endpoint\n\n`PUT /api/v1/tags/{tagId}`\n\n#### Expected Response Code\n200\n\n#### Request Fields\n\n- name: `string`\n\n#### Response Fields\n\n- data: `object`\n    - id: `int`\n    - name: `string`\n    - created_at `datetime`\n    - updated_at `datetime`\n\n#### Sample Request\n\n```\nPUT /api/v1/tags/2 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"name\": \"Updated Tag\"\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 2,\n        \"name\": \"Updated Tag\",\n        \"created_at\": \"2020-03-24 08:45:55\",\n        \"update_at\": \"2020-03-24 08:57:21\"\n    }\n}\n```\n\n## Delete\n\nDelete the given tag.\n\n#### Endpoint\n\n`DELETE /api/v1/tags/{tagId}`\n\n#### Expected Response Code\n204\n\n#### Sample Request\n\n```\nDELETE /api/v1/tags/2 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```","src/content/real-docs/api/tags.mdx","d9a7e97867a0f8ec","api/tags.mdx","api/templates",{"id":159,"data":161,"body":162,"filePath":163,"digest":164,"legacyId":165,"deferredRender":22},{"title":98,"hide_breadcrumbs":16},"## Index\n\nRetrieve a paginated list of all templates.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/templates`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `array\u003Cobject>`\n  - id: `int`\n  - name: `string`\n  - content: `string`\n  - created_at: `datetime`\n  - updated_at: `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/templates HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Template Name\",\n            \"content\": \"Template Content\",\n            \"created_at\": \"2020-07-17 09:48:07\",\n            \"updated_at\": \"2020-07-17 09:48:07\"\n        }\n    ],\n    \"links\": {\n        \"first\": \"https://app.laravelmail.com/api/v1/templates?page=1\",\n        \"last\": \"https://app.laravelmail.com/api/v1/templates?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\": {\n        \"current_page\": 1,\n        \"from\": 1,\n        \"last_page\": 1,\n        \"path\": \"http://app.laravelmail.com/api/v1/templates\",\n        \"per_page\": 25,\n        \"to\": 1,\n        \"total\": 1\n    }\n}\n```\n\n## Show\n\nRetrieve the details of a single template.\n\n### Usage\n\n#### Endpoint\n\n`GET /api/v1/templates/{templateId}`\n\n#### Expected Response Code\n200\n\n#### Response Fields\n\n- data: `object`\n  - id: `int`\n  - name: `string`\n  - content: `string`\n  - created_at: `datetime`\n  - updated_at: `datetime`\n\n#### Sample Request\n\n```\nGET /api/v1/templates/1 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"Template Name\",\n        \"content\": \"Template Content\",\n        \"created_at\": \"2020-07-17 09:48:07\",\n        \"updated_at\": \"2020-07-17 09:48:07\"\n    }\n}\n```\n\n## Store\n\nCreate a new template.\n\n### Usage\n\n#### Endpoint\n\n`POST /api/v1/templates`\n\n#### Expected Response Code\n201\n\n#### Request Fields\n\n- name: `string`\n- content: `string`\n\n#### Response Fields\n\n- data: `object`\n  - id: `int`\n  - name: `string`\n  - content: `string`\n  - created_at: `datetime`\n  - updated_at: `datetime`\n\n#### Sample Request\n\n```\nPOST /api/v1/templates HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"name\": \"Test Template\",\n\t\"content\": \"Test Content\"\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 3,\n        \"name\": \"Test Template\",\n        \"content\": \"Test Content\",\n        \"created_at\": \"2020-07-17 09:55:10\",\n        \"updated_at\": \"2020-07-17 09:55:10\"\n    }\n}\n```\n\n## Update\n\n#### Endpoint\n\n`PUT /api/v1/templates/{templateId}`\n\n#### Expected Response Code\n200\n\n#### Description\nUpdate the details of the given template.\n\n#### Request Fields\n\n- name: `string`\n- content: `string`\n\n#### Response Fields\n\n- data: `object`\n  - id: `int`\n  - name: `string`\n  - content: `string`\n  - created_at: `datetime`\n  - updated_at: `datetime`\n\n#### Sample Request\n\n```\nPUT /api/v1/templates/3 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\nContent-Type: application/json\n\n{\n\t\"name\": \"Test Template\",\n\t\"content\": \"Content\"\n}\n```\n\n#### Sample Response\n\n```json\n{\n    \"data\": {\n        \"id\": 3,\n        \"name\": \"Test Template\",\n        \"content\": \"Content\",\n        \"created_at\": \"2020-07-17 09:55:10\",\n        \"updated_at\": \"2020-07-17 09:57:07\"\n    }\n}\n```\n\n## Delete\n\nDelete the given template.\n\n### Usage\n\n#### Endpoint\n\n`DELETE /api/v1/templates/{templateId}`\n\n#### Expected Response Code\n204\n\n#### Sample Request\n\n```\nDELETE /api/v1/templates/3 HTTP/1.1\nHost: app.laravelmail.com\nAuthorization: Bearer 9w2fN7d4F3Banyv7gihYOWJEH6MvtYyZ\nAccept: application/json\n```","src/content/real-docs/api/templates.mdx","f04c55637d6883e6","api/templates.mdx","email-services/aws",{"id":166,"data":168,"body":170,"filePath":171,"digest":172,"legacyId":173,"deferredRender":22},{"title":169,"hide_breadcrumbs":22},"Aws SES","## Sending Emails\n\nTo send e-mails using the Amazon SES provider, you will need an AWS account. If you don't already have an account, [visit the AWS website](https://aws.amazon.com/) and click the _Create an AWS Account_ button in the top right corner of the screen.\n![https://sendportal.io/img/docs/providers/aws/aws-1.png](https://sendportal.io/img/docs/providers/aws/aws-1.png)\nBe aware that you'll need to provide credit card details, even if you only intend to make use of the free tier.\n\nOnce you've created an account, navigate to the SES (Simple Email Service) control panel by typing \"simple email service\" into the `Find Services` input on the AWS Management Console and clicking on the relevant option in the dropdown.\n\n![https://sendportal.io/img/docs/providers/aws/aws-2.png](https://sendportal.io/img/docs/providers/aws/aws-2.png)\n\nClick _Go to identity management_;\n\n![https://sendportal.io/img/docs/providers/aws/aws-3.png](https://sendportal.io/img/docs/providers/aws/aws-3.png)\n\nYou'll need to verify the domain from which you want to send all your e-mails, so click _Verify a New Domain_.\n\n![https://sendportal.io/img/docs/providers/aws/aws-4.png](https://sendportal.io/img/docs/providers/aws/aws-4.png)\n\nAt this stage we're not going to generate the DKIM settings, but this is worth doing once you move to a production environment, as it will reduce the risk of any messages you send being marked as spam.\n\n![https://sendportal.io/img/docs/providers/aws/aws-5.png](https://sendportal.io/img/docs/providers/aws/aws-5.png)\n\nOnce you click _Verify This Domain_ you'll be provided with a domain verification record;\n\n![https://sendportal.io/img/docs/providers/aws/aws-6.png](https://sendportal.io/img/docs/providers/aws/aws-6.png)\n\nYou'll now need to visit the site that you use to manage DNS for the domain provided (usually the domain registrar). The steps to do this are beyond the scope of this documentation as they vary from provider to provider, but you will need to create a `TXT` entry for the relevant domain and paste in the strings from the `Name` and `Value` columns.\n\nOnce you've completed this step, click `Close`. At first the `Verification status` will be `pending verification` and `Enabled for sending` will be `No`.\n\n![https://sendportal.io/img/docs/providers/aws/aws-7.png](https://sendportal.io/img/docs/providers/aws/aws-7.png)\n\nAs long as you have set the DNS entry correctly, the `Verification status` will transition to `verified` and `Enabled for Sending` will show `Yes`. You should also receive a notification via e-mail to say that the domain has been successfully verified.\n\n![https://sendportal.io/img/docs/providers/aws/aws-8.png](https://sendportal.io/img/docs/providers/aws/aws-8.png)\n\nIt can take some time to make this transition, but if it doesn't work ensure you didn't accidentally copy and paste any whitespace at the beginning or end of either string.\n\nWe also need to create a \"configuration set\". In order to do that, select the _Configuration Sets_ option from the side menu of the SES panel.\n![https://sendportal.io/img/docs/providers/aws/aws-9.png](https://sendportal.io/img/docs/providers/aws/aws-9.png)\n\n\nIf you don't require e-mail tracking (delivery, opens etc) you only need to create the configuration set.\n![https://sendportal.io/img/docs/providers/aws/aws-10.png](https://sendportal.io/img/docs/providers/aws/aws-10.png)\n\n\nNext we need to generate an access key pair. To do this you'll need to visit the [IAM (Identity and Access Management) module of AWS](https://console.aws.amazon.com/iam/home?#/home).\n\nIt's best to create a new IAM user, so click _Users_ and _Add user_. You can create the key pair using your root user account, but as this allows unrestricted access to the AWS console, it's a security risk if the credentials are ever compromised.\n\nAs the user doesn't need access to the management console, you can just select the `Programmatic access` option.\n\n![https://sendportal.io/img/docs/providers/aws/aws-12.png](https://sendportal.io/img/docs/providers/aws/aws-12.png)\n\nIf you don't already have any groups configured, you'll need to create one at the next step. If you only want the account to be able to send e-mails then select the `AmazonSESFullAccess` policy.\n\n![https://sendportal.io/img/docs/providers/aws/aws-13.png](https://sendportal.io/img/docs/providers/aws/aws-13.png)\n\nIf you also want to enable e-mail tracking, you'll need to add the `AmazonSNSFullAccess` policy.\n\n![https://sendportal.io/img/docs/providers/aws/aws-14.png](https://sendportal.io/img/docs/providers/aws/aws-14.png)\n\nSelecting tags for the user is optional, so we're not going to enter any at this stage. Once the user has been created you should now be able to copy and paste the access key and secret access key to the Laravel Mail provider configuration.\n\n![https://sendportal.io/img/docs/providers/aws/aws-15.png](https://sendportal.io/img/docs/providers/aws/aws-15.png)\n\n\nWe're now ready to configure the provider with Laravel Mail.\n![https://sendportal.io/img/docs/providers/aws/aws-11.png](https://sendportal.io/img/docs/providers/aws/aws-11.png)\n\n\nCongratulations! You can now send e-mails using Amazon SES.\n\nIf you require any more information about SES, check the official [Amazon SES documentation](https://docs.aws.amazon.com/ses/index.html).\n\n## Tracking\n\nIf you want to enable tracking for e-mails that you send through SES, then there are a few additional steps we need to complete.\n\nYou'll need to configure Amazon's SNS (Simple Notification Service) in order for it to send the required webhooks to Laravel Mail, so navigate to the SNS page from the AWS Management Console.\n\nBegin by creating a topic. Select _Topics_ from the menu and click _Create topic_. Everything other than a name is optional at this time.\n![https://sendportal.io/img/docs/providers/aws/aws-16.png](https://sendportal.io/img/docs/providers/aws/aws-16.png)\n\nWe also need to create a subscription to go along with our topic. For the Topic ARN, select the topic that you just created and select `HTTPS` as the protocol. The `Endpoint` will depend on your domain, but must end with `/api/v1/webhooks/aws`. For example, if Laravel Mail is installed at `https://app.laravelmail.com`, then each webhook should point to `https://campaigns.marketing.com/api/v1/webhooks/aws`.\n\nDo _not_ enable `raw message delivery`, otherwise the webhooks will not be handled correctly.\n\n![https://sendportal.io/img/docs/providers/aws/aws-17.png](https://sendportal.io/img/docs/providers/aws/aws-17.png)\n\nThe subscription needs to be confirmed before we can use it, but if you've supplied the correct URL for your Laravel Mail instance, and it's already available to the outside world, we'll do that automatically for you. You should see `Status` transition to `Confirmed`.\n\n![https://sendportal.io/img/docs/providers/aws/aws-18.png](https://sendportal.io/img/docs/providers/aws/aws-18.png)\n\nWe now need to tell SES to send any e-mail tracking webhooks to this endpoint so navigate back to the SES panel (we're almost there now...).\n\nSelect the domain that you already configured from `Domains` and open the section titled `Notifications`.\n\n\n\nClick _Edit Configuration_ and select the SNS topic that you created from the dropdown for each of the notification types.\n\n\n\nFinally, we need to enable the notification types for the configuration step that we created. Select the configuration set from the list and select SNS from the dropdown next to `Add Destination`.\n\n\n\nSelect all the notification types you wish to receive (excluding `Send` and `Rendering Failure`), and select the Topic from the list.\n\n\n\nPhew! That's it folks! You should now be setup to send and track e-mails using Amazon AWS.\n\n\n\nFor more information on Amazon SNS, visit the [official documentation](https://docs.aws.amazon.com/sns/latest/dg/sns-getting-started.html).\n\nFor more information on configuring SNS notifications for SES, visit the [developer guide](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-sns-notifications.html).\n\n## Throttling\n\nAWS throttles the sending of e-mails via the SES API. Requests are limited to 1 per second by default, but you can apply to have this rate increased.\n\nFor this reason you need to have a cache configured when using AWS. For a small mailing list the `file` driver is sufficient, but for medium or large mailing lists we recommend implementing `redis`.\n\nFor more information on SES throttling, see the official documentation [here](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-quotas.html?icmpid=docs_ses_console).","src/content/real-docs/email-services/aws.mdx","64cc8d05088c523b","email-services/aws.mdx","email-services/introduction",{"id":174,"data":176,"body":177,"filePath":178,"digest":179,"legacyId":180,"deferredRender":22},{"title":133,"hide_breadcrumbs":22},"Laravel Mail must be integrated with at least one email service provider in order for your emails to be dispatched.\nYou can have multiple email services configured at one given time.\nFor example, you may wish to send newsletters via SES and transactional emails via Postmark.\n\n> The credentials for each email service is stored in an encrypted format in the database. If the `APP_KEY` in your `.env` field is changed or lost, you will need to re-enter the credentials for each email service again.\n\nLaravel Mail currently integrates with the following five email service providers:\n\n- [AWS SES](/email-services/aws)\n- [Postmark](/email-services/postmark)\n- [Sendgrid](/email-services/sendgrid)\n- [Mailgun](/email-services/mailgun)\n- [Mailjet](/email-services/mailjet)\n- [SMTP](/email-services/smtp)\n\n## Testing\n\nYou can test if an Email Service has been correctly configured by clicking on the `Test` button in the page that lists all of your Email Services.\n\nIn order to test an Email Service you will have to provide the email address from which the email will be sent - this must be a verified email address or domain.","src/content/real-docs/email-services/introduction.mdx","b2040c4fa7da0d01","email-services/introduction.mdx","email-services/postmark",{"id":181,"data":183,"body":185,"filePath":186,"digest":187,"legacyId":188,"deferredRender":22},{"title":184,"hide_breadcrumbs":22},"Postmark","## Sending Email\n\nTo send e-mails using the Postmark provider, you will need a Postmark account. If you don't already have an account, visit the [Postmark website](https://postmarkapp.com/) and click the _Start Free Trial_ button in the top right corner of the screen.\n\nPostmark will automatically create a server for you, called `My First Server`. Click on the server and select the _API Tokens_ tab.\n\n![/img/docs/providers/postmark/postmark-1.png](/img/docs/providers/postmark/postmark-1.png)\n\nCopy the string from `Server API tokens` and create a provider within Laravel Mail.\n\n![/img/docs/providers/postmark/postmark-2.png](/img/docs/providers/postmark/postmark-2.png)\n\nNext, navigate to _Sender Signatures_ and select the option to _Add Domain_.\n\n![/img/docs/providers/postmark/postmark-3.png](/img/docs/providers/postmark/postmark-3.png)\n\nEnter your domain name and click _Verify domain_.\n\n![/img/docs/providers/postmark/postmark-4.png](/img/docs/providers/postmark/postmark-4.png)\n\nYou'll now need to visit the site that you use to manage DNS for the domain provided (usually the domain registrar). The steps to do this are beyond the scope of this documentation as they vary from provider to provider, but you will need to create a `TXT` entry for the relevant domain and paste in the strings from the `Hostname` and `Add this value` columns.\n\n![/img/docs/providers/postmark/postmark-5.png](/img/docs/providers/postmark/postmark-5.png)\n\nOnce you've added the entry with your DNS provider, click the _Verify_ button and the DKIM status should transition to `Verified`. It can take some time to make this transition, but if it doesn't work ensure you didn't accidentally copy and paste any whitespace at the beginning or end of either string.\n\n![/img/docs/providers/postmark/postmark-6.png](/img/docs/providers/postmark/postmark-6.png)\n\nTo configure e-mail tracking, select the server from the `Servers` page, select the `Transactional` (`Default Transactional Stream`) stream from the list of `Message Streams`.\n\n![/img/docs/providers/postmark/postmark-7.png](/img/docs/providers/postmark/postmark-7.png)\n\nSelect the _Webhooks_ tab and click _Add webhook_.\n\n![/img/docs/providers/postmark/postmark-8.png](/img/docs/providers/postmark/postmark-8.png)\n\nThe `Webhook URL` depends on your domain, but must end with `/api/v1/webhooks/postmark`. For example, if Laravel Mail is installed at `https://campaigns.marketing.com`, then each webhook should point to `https://campaigns.marketing.com/api/v1/webhooks/postmark`.\n\n![/img/docs/providers/postmark/postmark-9.png](/img/docs/providers/postmark/postmark-9.png)\n\nYou'll also need to enable open tracking and link tracking from the stream settings.\n\n![/img/docs/providers/postmark/postmark-10.png](/img/docs/providers/postmark/postmark-10.png)\n\nThat's it! You're now setup to send and track e-mails using Postmark.\n\n## Message Streams\n\nLaravel Mail enables the use of [Postmark message streams](https://postmarkapp.com/message-streams). You can supply this in the `Message Stream` field when adding Postmark as an Email Service. If you do not wish to use Message Streams you can leave this field blank.","src/content/real-docs/email-services/postmark.mdx","3449761a0cbb7fe7","email-services/postmark.mdx","email-services/sendgrid",{"id":189,"data":191,"body":193,"filePath":194,"digest":195,"legacyId":196,"deferredRender":22},{"title":192,"hide_breadcrumbs":22},"SendGrid","## Sending Emails\n\nTo send e-mails using the Twilio Sendgrid provider, you will need a Sendgrid account. If you don't already have one, [visit the Sendgrid website](https://sendgrid.com/) and sign up. No credit card is required, and you can get up to 100 free emails per month.\n\nOnce registered, open the `Setup Guide`, choose the `Web API` integration and select the PHP language option.\n\n\nGenerate an API key and copy it to your Laravel Mail configuration.\n\n\nCheck the `I've integrated the code above` box and click Next.\n\nSend a test e-mail from Laravel Mail and if it works successfully click _Verify integration_.\n\n## Tracking\n\n\nOpen and click tracking is enabled by default in SendGrid, but if you'd like to check the settings you'll find them under _Settings_ > _Tracking_.\n\n\nYou can also enable subscription tracking from this page. If enabled, SendGrid will automatically add unsubscribe links to the bottom of every e-mail you send.\n\n\nTo enable tracking within Laravel Mail you'll need to enable event notifications from _Settings_ > _Mail Settings_.\n\nThe `HTTP POST URL` depends on your domain, but must end with `/api/v1/webhooks/sendgrid`. For example, if Laravel Mail is installed at `https://campaigns.marketing.com`, then each webhook should point to `https://campaigns.marketing.com/api/v1/webhooks/sendgrid`.\n\nThat's it! You're now setup to send and track e-mails using SendGrid.","src/content/real-docs/email-services/sendgrid.mdx","074fce1682799921","email-services/sendgrid.mdx","features/campaigns",{"id":197,"data":199,"body":200,"filePath":201,"digest":202,"legacyId":203,"deferredRender":22},{"title":14,"hide_breadcrumbs":16},"## Overview\n\nA campaign is a set of individual email messages that are sent to your [subscribers](/features/subscribers). An example may be a new product launch or a regular newsletter.\n\n> Before creating a campaign, the following must already be configured:\n> - at least one [email service](/email-services/introduction).\n> - a list of [subscribers](/features/subscribers) to target with your campaign.\n> - an [email template](/features/templates) for your campaign (optional, but recommended).\n\n## View Campaigns\n\nTo view a listing of your campaigns, click the _Campaigns_ link in the sidebar. This will take you to the campaigns index page.\n\n## Starting New Campaigns\n\nNavigate to the campaigns index page and click the _New Campaign_ button.\n\n### Fields\n\n#### Campaign Name\n\nA friendly name for your campaign that is only used within Laravel Mail. It helps you properly distinguish one campaign from another. An example may be \"Newsletter - May 2020\".\n\n#### Subject\n\nThe subject of your campaign email. This is what your mail recipients will see in their inbox, so you should try to keep it clear and concise. The Subject can include placeholders for the Subscriber's `{{first_name}}`, `{{last_name}}` and `{{email}}`. Refer to the Placeholders section of the [Templates](/docs/v2/features/templates) documentation for more information.\n\n#### From Name\n\nAlso known as the the email sender name. This tells the mail recipients who sent the message.\n\n#### From Email\n\nThis is what your mail recipients will see as the \"from\" address. This should be an address that you have ownership of and must match the settings for the selected email service.\n\n#### Template (optional)\n\nThe template that you wish to use for your campaign email.\n\n#### Track Opens\n\nDetermines whether or not individual email opens are tracked. If you wish to track opens, webhooks must be configured for your email service.\n\n#### Track Clicks\n\nDetermines whether or not individual email clicks are tracked. If you wish to track clicks, webhooks must be configured for your email service.\n\n#### Content\n\nThe body of your campaign email. This is what gets sent to your subscribers, so make it good!\n\nThe content can include placeholders. To understand which placeholders are available to you, see the Placeholders section of the [Templates](/features/templates) documentation.\n\nOnce you have filled out the form, click _Save and Continue_. Your campaign will now be marked as a **Draft**.\n\n## Sending Campaigns\n\nCampaigns are dispatched from the preview page.\n\n### Test Email\n\nIt's good practice to send out a test email before you dispatch your campaign. This allows you to see how your email will appear to your recipients and offers an opportunity to pick up on any mistakes you may have made. To send a test email, simply enter an email address in the `Recipient` field and click _Send Test Email_. It will be dispatched using your configured email service.\n\n### Sending Options\n\n#### Recipients\n\nYou can choose to dispatch your campaign to your entire subscriber list or those with specific tags.\n\n#### Schedule\n\nYou can schedule your campaign to be dispatched immediately or at a later date and time.\n\n#### Sending Behaviour\n\nYou can specify one of two sending behaviours for your campaign:\n\n- `Queue Draft` - this will generate each of your messages as a draft and requires you to dispatch each email individually from the _Messages_ section. This is a good idea if you want to double check how each email will display prior to sending, especially if you're using a complex template that may result in each email varying from subscriber to subscriber. We do not recommend this option if you have a large list of subscribers!\n- `Send Automatically` - this will generate your messages and dispatch them automatically.\n\n> If you find that your campaigns do not send, please ensure you have configured scheduled tasks and queue workers as described in the [Additional Configuration](/getting-started/configuration-and-setup#additional-configuration) section.","src/content/real-docs/features/campaigns.mdx","207c668ab41d139f","features/campaigns.mdx","features/imports",{"id":204,"data":206,"body":208,"filePath":209,"digest":210,"legacyId":211,"deferredRender":22},{"title":207,"hide_breadcrumbs":16},"Imports","## CSV Import\n\nYou can import a CSV file into Laravel Mail using the `Import Subscribers` button.\n\n![https://i.imgur.com/6ePMQ2Y.png](https://i.imgur.com/6ePMQ2Y.png)\n\nOnce you click the Import button, you will be prompted to select the CSV file.\n\nThe csv file should have the following columns:\n\n- `email` - required\n- `first_name` - optional\n- `last_name` - optional\n\n![https://i.imgur.com/l4wXjAF.png](https://i.imgur.com/l4wXjAF.png)","src/content/real-docs/features/imports.mdx","db8adbcf5b6a21fb","features/imports.mdx","features/inbox",{"id":212,"data":214,"body":216,"filePath":217,"digest":218,"legacyId":219,"deferredRender":22},{"title":215,"hide_breadcrumbs":16},"Inbox","## Inbox\n\nThe inbox is the main view of the email client. It shows all the emails that have been sent to you.\nIn the future, you will be able to have multiple inboxes for different accounts.\n\n![https://i.imgur.com/jCyGPs4.png](https://i.imgur.com/jCyGPs4.png)","src/content/real-docs/features/inbox.mdx","8e8259256d5f1f62","features/inbox.mdx","features/messages",{"id":220,"data":222,"body":223,"filePath":224,"digest":225,"legacyId":226,"deferredRender":22},{"title":62,"hide_breadcrumbs":16},"## Overview\n\nAfter a campaign has been dispatched, a message will be generated for each targeted Subscriber. A message represents a single email. You can view all of your messages by clicking the _Messages_ link in the sidebar. You will notice that there are two types of message:\n\n### Drafts\n\nA draft is a message that has been queued using the `Queue Draft` campaign sending behaviour. The _Drafts_ tab offers a listing of every drafted message and allows you to preview the final message before sending. A draft message will only be sent to the subscriber when you click on the _Send Now_ button.\n\n### Sent\n\nSimilarly, the _Sent_ tab offers a listing of every message that has been dispatched. You can use this page to track and filter the status of your messages.","src/content/real-docs/features/messages.mdx","52d80780f42219de","features/messages.mdx","features/osint",{"id":227,"data":229,"body":231,"filePath":232,"digest":233,"legacyId":234,"deferredRender":22},{"title":230,"hide_breadcrumbs":16},"Intelligence Center","## Intelligence Center\n\nThe Intelligence Center is a part of the application that uses SpiderFoot to gather intelligence about email addresses, domains, and IP addresses.\nIt is also used to gather information about the target's social media accounts, phone numbers, and other relevant information.\n\n### How to use it\n\nTo use the Intelligence Center, you need to enter the target's email address or domain name in the search bar.\nOnce you have entered the target's information, click on the \"Search\" button to start the intelligence gathering process.\n\n![https://i.imgur.com/0g9w0wU.png](https://i.imgur.com/0g9w0wU.png)\n\nAfter the intelligence gathering process is complete, you will see a list of the target's information gathered by SpiderFoot. This information includes the target's email addresses, domains, IP addresses, and other relevant information.\n\n![https://i.imgur.com/1g9w0wU.png](https://i.imgur.com/1g9w0wU.png)\n\nYou can also use the \"Export\" button to export the target's information to a CSV file. This file can then be imported into other applications or used for further analysis.\n\n![https://i.imgur.com/jCyGPs4.png](https://i.imgur.com/jCyGPs4.png)","src/content/real-docs/features/osint.mdx","daa74dab8e98a864","features/osint.mdx","features/subscribers",{"id":235,"data":237,"body":238,"filePath":239,"digest":240,"legacyId":241,"deferredRender":22},{"title":80,"hide_breadcrumbs":16},"## Overview\n\nSubscribers represent individuals that are available to you when sending out campaigns. Subscribers can optionally be assigned one or more [tags](/features/tags).\n\n> The email address for each Subscriber must be unique in each [workspace](/features/workspaces).\n\n## View Subscribers\n\nTo view a list of your subscribers, click the _Subscribers_ link in the sidebar. This will take you to the subscribers index page.\n\n### Subscriber Table\n\nSubscribers are listed in a paginated table, where each row represents a different subscriber.\n\n### Filtering Subscribers\n\nThe following filtering options are available:\n\n- Subscriber Email and/or Name. Partial matches will also be returned.\n- Subscriber Subscription Status\n\n## Viewing an Individual Subscriber\n\nTo view an individual subscriber, head to the subscribers index page and click on the subscriber's email in the table that's presented to you.\n\n### Subscriber Details\n\nEach subscriber's email, first name, last name and subscription status is displayed when viewing an individual subscriber.\n\nIn addition, if the subscriber has been assigned any [tags](/features/tags) then these are also displayed.\n\n### Messages\n\nIf any messages have been sent to the subscriber, they will be listed in the Messages section.\n\n## Adding and Updating Subscribers\n\nSubscribers can be added and updated in the following ways:\n\n* manually through the application interface\n* via a CSV upload\n* programmatically using the API.\n\n### Application Interface\n\n#### Adding A Subscriber\n\nNavigate to the subscribers index page and click _New Subscriber_.\n\n#### Updating A Subscriber\n\nClick the _Edit_ button on the subscriber's row in the list.\n\nThe following information can be saved for each Subscriber:\n\n- email\n- first name (optional)\n- last name (optional)\n- subscription status\n- tags (optional)\n\n### CSV Imports\n\nLaravel Mail allows you to easily import multiple subscribers via a CSV upload. This can be used to create new subscribers and update existing ones.\n\nTo import subscribers via CSV, click the _Subscribers_ link in the sidebar. From there, click the overflow menu button and then _Import Subscribers_.\n\n#### CSV File Format\n\nThe following fields are available in the CSV.\n\n- `id` (optional) - The ID field is only used when updating existing subscribers, and must be set if you wish to update the subscriber's email address. The `id` field should be present but left empty when importing new subscribers.\n- `email` (required) - A unique email address for the subscriber. Note that if the email address is already present in Laravel Mail, the row will instead update the `first_name` and `last_name` of the existing subscriber.\n- `first_name` (optional) - The subscriber's first name.\n- `last_name` (optional) - The subscriber's last name.\n\nAdditionally, the **first row** of the CSV **must** be a header row, where each column is the name as listed above, and must be provided in the order above.\n\nEach row after the header row must represent a single subscriber. Optional fields can be left empty.\n\n> The import page shows an example of a CSV file, with the header and a row.\n\n#### Uploading The File\n\nTo upload the file, click the _Browse_ button on the file selector, and choose the file you wish to upload. When you have selected your file, you can click the _Upload_ button to begin the upload process.\n\n#### Tags\n\nTags can be assigned to subscribers by using the `Tags` selector. If you have any tags available, you can pick which ones to assign here. Note that the chosen tags will apply to all subscribers uploaded in the chosen CSV. It is currently not possible to specify separate tags for each individual subscriber.\n\n### API\n\nRefer to the [subscribers API documentation](/docs/v2/api/subscribers) for information on how to manage subscribers through the API.\n\n## Exporting Subscribers\n\nTo export subscribers, click the _Subscribers_ link in the sidebar. From there, click the overflow menu button and then _Export Subscribers_.\n\n## Unsubscribing\n\n### Manually Unsubscribing\n\nTo manually unsubscribe a subscriber, you should go to the subscriber edit page, uncheck `Subscribed` and then click _Save_.\n\n### Unsubscribe Links\n\nLaravel Mail allows automatic injection of unsubscribe links in your templates and campaigns. See the [templates](/docs/v2/features/templates) section for more information on how this works.\n\nWhen a user clicks on the unsubscribe link, they will be sent to a web page asking them to confirm that they want to be unsubscribed.\n\nIf they decide to unsubscribe, they will be shown a confirmation message that they have been unsubscribed, along with the option to resubscribe.","src/content/real-docs/features/subscribers.mdx","43927e3cf09ad24f","features/subscribers.mdx","features/tags",{"id":242,"data":244,"body":245,"filePath":246,"digest":247,"legacyId":248,"deferredRender":22},{"title":89,"hide_breadcrumbs":16},"## Overview\n\nTags offer a convenient means of grouping subscribers together. For example, you may have one tag for your monthly newsletter and another for customers that want to be notified of a new product launch.\n\nTags are completely optional; a subscriber can be assigned one tag, multiple tags, or none at all.\n\n## View Tags\n\nTo view a listing of your tags, click the _Tags_ button on the subscribers index page. This will take you to the tags index.\n\n## Adding and Updating Tags\n\nTags can be added in the following ways:\n\n- through the application interface\n- via the API\n\n### Application Interface\n\nTo add a new tag through the application interface, navigate to the tags index page and click _New Tag_.\n\nTo edit a tag, click the _Edit_ button on the tag listing.\n\nTags are very simple and only require a `Name`, which must be unique across all tags in the current workspace.\n\n### API\n\nRefer to the [Tags API Documentation](/api/tags) for information on how to manage tags through the API.\n\n## Deleting Tags\n\nTags can be deleted in the following ways:\n\n- through the application interface\n- via the API\n\n### Application Interface\n\nTo delete a tag through the application interface, navigate to the tags index page. Once there, find your target tag in the listing and click the _Delete_ button.\n\n### API\n\nRefer to the [Tags API Documentation](/api/tags) for information on how to delete tags through the API.","src/content/real-docs/features/tags.mdx","ad42d9aec33af90f","features/tags.mdx","features/templates",{"id":249,"data":251,"body":252,"filePath":253,"digest":254,"legacyId":255,"deferredRender":22},{"title":98,"hide_breadcrumbs":16},"## Overview\n\nTemplates make it easy for you to reuse content and designs across your campaigns. You may, for example, want to create a template for your monthly newsletter. This would make it easier for you to keep the design of your emails consistent and reduce the effort that's needed to prepare your newsletter each month. Our dynamic templating system also allows you to insert subscriber details into your templates, such as their name.\n\n## View Templates\n\nTo view a listing of your templates, click the _Templates_ link in the sidebar. This will take you to the templates index page.\n\n## Creating and Updating Templates\n\nTo add a template, navigate to the templates index page and then click the _New Template_ button.\n\nA template requires the following:\n\n- A name\n- Contents of the template\n\nThe contents of a template must be valid HTML.\n\nAdditionally, the template **must** include a `{{content}}` placeholder to inject the contents of a campaign. To set the placeholder, you should include the following at the desired place in your template:\n\n```\n{{content}}\n```\n\nWhen sending a [campaign](/docs/v2/features/campaigns), the campaign's content will be substituted for this placeholder.\n\n### Placeholders\n\nAs well as the required `{{content}}` placeholder, the following placeholders are available in templates:\n\n- `{{email}}` – The subscriber's email\n- `{{first_name}}` – The subscriber's first name (if set)\n- `{{last_name}}` – The subscriber's last name (if set)\n- `{{unsubscribe_url}}` – A URL generated to allow the subscriber to unsubscribe\n- `{{webview_url}}` – A URL generated to allow the subscriber to view the message in a web view\n\n### URL Placeholders\n\nThe URL placeholders (`{{unsubscribe_url}}` and `{{webview_url}}`) generate the URL only; they do not create a clickable link such as an HTML anchor tag.\n\nThis means that simply placing one of these placeholders in the template will result in the URL being displayed as plain text. You are required to create an appropriate anchor tag and include the URL as the `href` property if you wish to create clickable links. For example:\n\n```html\n\u003Ca href=\"{{unsubscribe_url}}\">Click here to unsubscribe\u003C/a>\n```\n\n### Inline CSS Styles\n\nAlthough external stylesheets and embedded styles (i.e. including the styles in the `\u003Chead>` of an HTML page) work well for web pages, many email clients will ignore or strip out these elements.\n\nLaravel Mail automatically inlines all of your CSS styles when the emails are dispatched. You can therefore continue to use the convenience of CSS and/or embedded styles in your templates, but still ensure that your emails display correctly for your subscribers.\n\nIf your template contains CSS and inline styles, the inline styles will be retained, and the CSS and/or embedded styles will be added to the existing inline styles.","src/content/real-docs/features/templates.mdx","00779f3043d2ff84","features/templates.mdx","features/workflows",{"id":256,"data":258,"body":260,"filePath":261,"digest":262,"legacyId":263,"deferredRender":22},{"title":259},"Workflows","## Overview\n\nIt allows you to create email workflows which can be triggered by different events and execute a sequence of tasks.\n\n![https://i.imgur.com/7GHUog5.png](https://i.imgur.com/7GHUog5.png)\n\n\n## Workflows\n\nA **Workflow** is initiated by a **Trigger** and executes a sequence of **Tasks** in a specified order. The package uses a **DataBus** to facilitate the transfer of information between tasks, ensuring smooth data handling and process flow.\n\n\n\n## Workflows Logs\n\nThe workflow logs are stored in the database and can be accessed via the **WorkflowLogs** button in the bottom bar.\n\n![https://i.imgur.com/vQdJXcp.png](https://i.imgur.com/vQdJXcp.png)\n\n### Triggers\n\n**Triggers** act as the starting points for workflows, determining how and when a workflow is activated.\n\nEach trigger defines the conditions under which a workflow will be executed.\n\n**Note**: Additional trigger types will be introduced in future updates.\n\n#### ObserverTrigger\n\nThe Observer Trigger can listen to Eloquent Model Events and will then pass the Model which triggered the Event to the\nWorkflow.\n\nTo make it Work, add the WorkflowObservable to your Eloquent Model.\n\n``` php\n use WorkflowObservable;\n```\n\n#### ButtonTrigger\n\nThe Button Trigger is able to render a button in your \"frontend\" and Execute a Workflow based by a click on it.\nButtonTrigger also accept an Model which they pass to the Workflow.\n\nYou can influence the buttons by adding your own classes or styles directly to each ButtonTrigger.\nAlso you can publish the blade and change it according to your needs.\n\nYou have multiple ways of rendering ButtonTrigger.\n\n##### ByName\n``` php\n {!! LaravelCompany\\Mail\\Triggers\\ButtonTrigger::renderButtonByName('name', $model) !!}\n```\n\n##### ByWorkflowId\n``` php\n {!! LaravelCompany\\Mail\\Triggers\\ButtonTrigger::renderButtonByWorkflowId(workflow_id, $model) !!}\n```\n\n##### ByCategory\nThis will return all Triggers from the Category.\n\n``` php\n {!! LaravelCompany\\Mail\\Triggers\\ButtonTrigger::renderButtonsByCategory('categoryName', $model) !!}\n```\n\n\n### Tasks\n\nA Task is a single code execution Node in the Workflow.\n\nTask | Description\n---- | -----------\nChangeModel | Changes an Eloquent Model (Its not saving the changes to the DB)\nDomPDF | The DomPDF Task offers you a way to generate a PDF from HTML and put it to the DataBus (Works great with the HtmlInput Task).\nExecute | The Execute Task offers you to execute Shell Commands and is able to push the output of them to the DataBus.\nHtmlInput | The HtmlInput Task offers you a Trix Input Field which is able to render Blade. You can put in placeholders for dynamic content in two Ways. From the Model passed through the Workflow or from the DataBus.\nHttpStatus | The HttpStatus offers you a way to receive the Http Status of a given URL.\nPregReplace | The PregReplace Task offers you a way to to a preg replace on a Value from the Model or a DataBus Variable.\nLoadModel | Loads an Eloquent Model from the DB. You can provide the Class and the id.\nSaveFile | The SaveFile Task allows you to save Data to a File. Works easily with your registered Storage defines.\nSaveModel | Saves an Eloquent Model.\nSendMail | The SendMail Task allows you to send a Mail. You can pass the Content and Attachments to it. (Works great with HtmlInput and DomPDF)\nSendSlackMessage | This Task let you send a Slack Message. Please read the Section about Slack Notifications to make your app ready too use this.\n\n#### SendSlackMessage\n\nTo send Slack messages you need to follow this 3 points.\n1. You need to install Slack notifications [Laravel Slack Documentation](https://laravel.com/docs/8.x/notifications#slack-notifications)\n2. You need to set up an incoming Slack Webhook [Slack Documentation](https://api.slack.com/messaging/webhooks)\n3. Set the WebhookUrl to your env file with WORKFLOW_SLACK_CHANNEL=YourSlackWebhookUrl\n\n### DataBus\n\nThe DataBus is a way to pass information between the single Tasks. This keeps the Tasks independent of each other.\n\nResource | Description\n---- | -----------\nValueResource | The Value Resource is the simplest Resource. You can just write your Data in an input field.\nConfigResource | The Config Resource lets you access values from your Config Files.\nModelResource | The ModelResource lets you access the Data from the passed Eloquent Model.\nDataBusResource | The DataBusResource lets you access the Data from the DataBus. This means all values which got set by a previous Task are access able here.","src/content/real-docs/features/workflows.mdx","2db7994eda035838","features/workflows.mdx","features/workspaces",{"id":264,"data":266,"body":267,"filePath":268,"digest":269,"legacyId":270,"deferredRender":22},{"title":107},"## Overview\n\nWorkspaces allow you to maintain separate subscriber lists and campaigns for your projects. You may, for instance, have one workspace for your personal site's mailing list and another for your podcast.\n\n## View Workspaces\n\nClick the username displayed on the top-right side of the page, and select the _Workspaces_ item from the drop-down menu. This will display a listing of your existing workspaces and a form which allows you to create new ones.\n\n## Add Workspace\n\nA workspace only requires a name. Your user account will automatically be added to the new workspace with the administrator role.\n\n## Switch Workspace\n\nIf you have multiple workspaces, you will notice a select box next to your username on the top-right hand side of the page. The default selected option is your current Workspace. You can easily switch to your other workspaces by clicking the select box and choosing your desired workspace from the list that is shown.\n\n## Managing Workspace Members\n\n> You must be the owner of the workspace to do this.\n\nTo manage the members of your workspace, click the _Manage Users_ menu item.\n\nYou will see a list of all the users currently in your active workspace.\n\n### Inviting Members\nTo add a new member, you must enter their email address in the field under the Invite User section, and then click _Send Invite._\n\nUsers who have not yet accepted the invite will be shown in a separate Invited Users section.\n\nTo retract the invitation, click the _Retract_ button next to the user's name.\n\n### Removing Members\nTo remove a user who is already in the workspace, click the _Remove_ button next to their name in the list.kspace, click the _Remove_ button next to their name in the list.","src/content/real-docs/features/workspaces.mdx","a1bf2508b3439f7c","features/workspaces.mdx","getting-started",{"id":271,"data":273,"body":275,"filePath":276,"digest":277,"legacyId":278,"deferredRender":22},{"title":274,"hide_breadcrumbs":22},"Quickstart Guide","![https://i.imgur.com/7GHUog5.png](https://i.imgur.com/7GHUog5.png)\n\n## Introduction\n\nSendPortal comes packaged with a command-line setup utility that will get you up and running in a few minutes. It will attempt to automatically configure SendPortal and create a default user account and workspace for administrative purposes.\n\nAlternatively, you can configure SendPortal by using the Setup Wizard, or by following the Manual Configuration section below.\n\n- [Setup Command](#setup-command) (Recommended)\n- [Setup Wizard](#setup-wizard)\n- [Manual Configuration](#manual-configuration)\n\nOnce you have successfully setup SendPortal, you must also follow the [Additional Configuration](#additional-configuration) instructions below.\n\n> For security reasons, we recommend setting up SendPortal as soon as possible after installation.\n\n## Setup Command\n\nIn the SendPortal installation's root directory, run the following command:\n\n```bash\nphp artisan sp:setup\n```\n\nThe command will prompt you for confirmation on most steps. If this is the first time running setup for an installation, you should answer yes to the prompts in order to ensure that SendPortal is completely set up as expected.\n\nYou can safely run the command multiple times if needed.\n\nOnce the setup command has completed, you will need to move onto the [Additional Configuration](#additional-configuration) section in order to correctly configure how SendPortal dispatches your messages.\n\n## Setup Wizard\n\nYou can also use a Setup Wizard to guide you through the installation process. If you are hosting SendPortal at `campaigns.example.com`, just point your browser to `campaigns.example.com/setup` to launch the setup process.\n\n > In order to launch the Setup Wizard the `.env` file must already be present in the root folder of your installation, and the encryption key must be set. See the \u003Ca href=\"#manual-configuration\">Manual Configuration\u003C/a> section below for more information.\n\n > Once your first user has been created, the Setup Wizard will no longer be available.\n\nOnce the Setup Wizard has completed, you will need to move onto the [Additional Configuration](#additional-configuration) section in order to correctly configure how SendPortal dispatches your messages.\n\n## Manual Configuration\n\n### Creating Configuration File\n\nSendPortal's configuration is handled through the`.env` file. By default, this file does not exist. To create it manually, you will need to clone the included `.env.example`, rename it to `.env` and make changes as necessary.\n\n> Any keys that are set in the `.env` file will be used, even if they are blank. If you do not wish to actively set a key, you should remove it from your `.env` file, rather than leave it blank.\n\n### Key Generation\n\nIf you did not run the setup command, or if for some reason the `APP_KEY` value is empty, you will need to create an encryption key. This is used by SendPortal to apply encryption to things like user sessions.\n\nTo generate a new key, you should run the following command:\n\n```bash\nphp artisan key:generate\n```\n\n> Although key generation can be run again, this will invalidate any sessions or make any stored encrypted data inaccessible. You should not generate a new key unless absolutely necessary.\n\n### Base URL\n\nYou will need to set the `APP_URL` variable in the `.env` file to the base URL for your installation of SendPortal.\n\nFor example, if you are hosting your installation of SendPortal at `campaigns.example.com`, you will need to set the following:\n\n```\nAPP_URL=https://campaigns.example.com\n```\n\nThis is necessary to allow SendPortal to correctly generate unsubscribe links, or links for user registration emails.\n\n### Database Connection\n\nIn order for SendPortal to connect to your database, you must set the database configuration values in the `.env` file.\n\nFirstly, you need to specify what type of database you are using by setting the `DB_CONNECTION` value to either `mysql` for a MySQL database or `pgsql` for a PostgreSQL database.\n\nSecondly, you need to set the connection details for your database installation. The following values need to be set:\n\n- `DB_HOST` – This is the host of your database, e.g. `127.0.0.1` for a local installation\n- `DB_PORT` - The port SendPortal should use to talk to your database\n- `DB_DATABASE` – The database SendPortal should use to store its data\n- `DB_USERNAME` – The username SendPortal will use to authenticate itself with your database\n- `DB_PASSWORD` – The password SendPortal will use to authenticate itself with your database\n\n### Database Migrations\n\nTo set up the database schema, migrations must be run. Migrations are instructions an application uses to configure database schema, running in sequence from beginning to end in order to ensure that the database is set up as the application expects it to be.\n\n> Do not make custom modifications to the database yourself. Any database changes that SendPortal requires should be accomplished through the running of migrations.\n\n> Before running migrations, ensure that you have correctly configured your database connection, as schema changes will be made.\n\nThe included command-line setup command will run migrations for you (after a prompt), but you can run migrations manually using the following command:\n\n```bash\nphp artisan migrate\n```\n\n### Publishing Vendor Files\n\nRun the following command to publish the config, views, languages and assets from SendPortal to your project:\n\n```bash\nphp artisan vendor:publish --provider=Sendportal\\\\Base\\\\SendportalBaseServiceProvider\n```\n\n### Workspaces & Users\n\nIf you do not use the setup command to create a workspace and user with which to administer SendPortal, you will need to go through the web interface registration process.\n\nYou must follow the User Management Email configuration specified in Additional Configuration in order to allow registration and user invitation in SendPortal.\n\n## Additional Configuration\n\n### Cron Jobs\n\nSendPortal makes use of regular background tasks and it is therefore essential to create a cron job to run every minute:\n\n```bash\n* * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1\n```\n\nPlease refer to the Laravel documentation on [Task Scheduling](https://laravel.com/docs/scheduling) for further information.\n\n### Message Sending & Queues\n\nSendPortal sends email messages using a queue system. The queue can be processed synchronously or asynchronously. Asynchronous queues can be handled via your primary database or via redis.\n\nYou can specify which queue driver to use in the `QUEUE_CONNECTION` parameter in the `.env` file. This should be set to one of `sync`, `database` or `redis`, depending on your requirements. This configuration applies to all messages sent in SendPortal and cannot be changed on a per-user, per-workspace or per-provider basis.\n\n#### Sync\n\nThe synchronous queue runs any queued jobs as they are requested, requiring the user to wait until the job has been completed before any further action can be taken.\n\nThis has the advantage of being simple and requiring no additional configuration. However, as this does not scale well, this approach is only recommended for relatively small message sending requirements.\n\nTo use the synchronous queue, you only need to set the `QUEUE_CONNECTION` to `sync`, and no further configuration is required.\n\n#### Database\n\nProcessing asynchronous queues via the database is considered a middle option. Running an asynchronous queue avoids the issues that come up using a synchronous queue, as messages can be processed without blocking further action being taken by the user, and will work until all jobs are completed regardless of how long it takes.\n\nThe advantage of using the database for running the asynchronous queue is that it requires no extra services to be run, as it uses the primary database (MySQL or Postgres) that you have already configured for SendPortal.\n\nThe main disadvantage is that under heavy workloads the queue can negatively affect the performance of the database.\n\nAs such, the database queue is recommended for small to medium sized mailing lists.\n\nTo use the database driver, you must first set the `QUEUE_CONNECTION` to `database` in your `.env` file. You also need to run the following commands, which will create a new `jobs` table in your database, which that will be used to manage the queue.\n\n```bash\nphp artisan queue:table\nphp artisan migrate\n```\n\n#### Redis\n\nRedis is the recommended solution for running medium to large mailing lists.\n\nYou will of course need an installation of redis on your server. You will then need to set the `QUEUE_CONNECTION` to `redis` and set the following configuration values in your `.env` file:\n\n- `REDIS_HOST`\n- `REDIS_PASSWORD`\n- `REDIS_PORT`\n\n### Running the queue without Laravel Horizon\n\nIf you don't want to use Horizon to manage you redis queue or you're using the database driver you will have to run a [queue worker](https://laravel.com/docs/queues#running-the-queue-worker) for each queue that Sendportal uses.\n\n- `sendportal-message-dispatch`: dispatches messages to the email service\n- `sendportal-webhook-process`: processes incoming webhooks\n\n```\nphp artisan queue:work --queue=sendportal-message-dispatch\nphp artisan queue:work --queue=sendportal-webhook-process\n```\n\n### Running Redis Queues With Laravel Horizon\n\nSendPortal bundles [Laravel Horizon](https://laravel.com/docs/horizon) as an easy way to run and manage redis queues.\n\nConfiguration for the queues necessary to run SendPortal is already included. In order to use Horizon as your queue manager, you should first publish the Horizon assets:\n\n```\nphp artisan horizon:publish\n```\n\nTo start processing your queue items with Horizon, you simply need to run the following command:\n\n```\nphp artisan horizon\n```\n\nWhen using Horizon in production, you should consider using a service to ensure the queue runner restarts if it fails for any reason. The Horizon documentation has a [guide](https://laravel.com/docs/horizon#deploying-horizon) on how to use Supervisor to do this.\n\n#### Autoscaling\n\nThe configuration for Horizon included with SendPortal allows autoscaling of queue workers. By default, webhooks received and messages sent via the queue each have a minimum of 2 processes running, and a maximum of 10 or 20. If these values do not suit your requirements, they can be adjusted in the `config/horizon.php` file—in particular `supervisor-2` and `supervisor-3`—using the `minProcesses` and `maxProcesses` values.\n\n### User Management Email\n\nIn order to use user management functionality (for example, inviting new users or password resets) in SendPortal, it is necessary to set up an email service that SendPortal can use to send the messages.\n\n> If you are not going to be inviting any other users or team members to your SendPortal installation, then this section can be ignored.\n\n> There is no relationship between SendPortal's internal mail configuration and any email services that are configured for a workspace.\n\n> You will need to set `SENDPORTAL_REGISTER=true` in the `.env` file in order to use the registration and user invitation functionality.\n\n> By default, users are granted the ability to reset their passwords. If you wish to disable password resets, you must set `SENDPORTAL_PASSWORD_RESET=false` in the `.env` file.\n\nYou first need to set `MAIL_MAILER` to your chosen service. The options here are `smtp`, `sendmail`, `ses`, `mailgun` and `postmark`.\n\n#### SMTP & Sendmail\n\nWhen using a regular SMTP provider, or sendmail, you should set the following configuration values:\n\n- `MAIL_HOST` – This is the host for the SMTP server\n- `MAIL_PORT` – This is the port that will be used to connect to the SMTP server\n- `MAIL_USERNAME` – The username used to authenticate with the SMTP server\n- `MAIL_PASSWORD` – The password used to authenticate with the SMTP server\n- `MAIL_FROM_ADDRESS` – The address that mail will appear to come from\n- `MAIL_FROM_NAME` – The name that mail will appear to come from\n\n#### SES\n\nWhen using SES as your mail service, you should set the following configuration values, adding them to the `.env` file if they are not already present:\n\n- `AWS_ACCESS_KEY_ID` – Your AWS ID key\n- `AWS_SECRET_ACCESS_KEY` – Your AWS secret key\n- `AWS_DEFAULT_REGION` – Your AWS region (defaults to `us-east-1` if not included in the configuration file)\n\n#### Mailgun\n\nWhen using Mailgun as your mail service, you should set the following configuration values, adding them to the `.env` file if they are not already present:\n\n- `MAILGUN_DOMAIN`\n- `MAILGUN_SECRET`\n- `MAILGUN_ENDPOINT` – (defaults to `api.mailgun.net` if not included in the configuration file)\n\n#### Postmark\n\nWhen using Postmark as your mail service, you should set the following configuration values, adding them to the `.env` file if they are not already present:\n\n- `POSTMARK_TOKEN`","src/content/real-docs/getting-started/index.mdx","08c5b3ad24c77f79","getting-started/index.mdx","getting-started/installation",{"id":279,"data":281,"body":283,"filePath":284,"digest":285,"legacyId":286,"deferredRender":22},{"title":282,"hide_breadcrumbs":16},"Installation","## Installation\n\nLaravel Mail can be installed as a stand-alone application (i.e. including everything you need to run Laravel Mail),\nor as a package inside an existing Laravel application.\n\nThis page covers the stand-alone installation.\nIf you want to install Laravel Mail as a package, then head over to the [package installation page](/docs/getting-started/package-installation).\n\n### Requirements\n\nTo run Laravel Mail, your environment must meet a few minimum requirements:\n\n- PHP 8.3 or higher\n- Laravel 11 or higher\n- A MySQL or PostgreSQL database\n\n\n### Installing Laravel Mail\n\nClone the repository to your environment, using the following command:\n\n```bash\ngit clone https://github.com/laravelcompany/app.laravelmail.com.git\n```\n\nNext, change into the directory and install the dependencies:\n\n```bash\ncd app.laravelmail.com\ncomposer install\n```\n\nOnce the installation is complete, you can run the migrations to create the database tables:\n\n```bash\nphp artisan migrate:fresh --seed\n```\n\nFinally, you can run the application:\n\n```bash\nphp artisan serve\n```\n\nYou should now be able to access the application at `http://localhost:8000`.","src/content/real-docs/getting-started/installation.mdx","8f64d916fcaaf975","getting-started/installation.mdx","getting-started/package-instalation",{"id":287,"data":289,"body":290,"filePath":291,"digest":292,"legacyId":293,"deferredRender":22},{"title":71,"hide_breadcrumbs":22},"As of Version 1, Laravel Mail can be installed as a stand-alone application (i.e. including everything you need to run Laravel Mail), or as a package inside an existing Laravel application.\n\nThis page covers the Package installation. If you want to install Laravel Mail as a stand-alone application, then head over to the [Installation guide](/getting-started/installation).\n\n## Requirements\n\n- Laravel ≥ 11\n- PHP ≥ 8.3\n- MySQL (≥ 5.7) or PostgreSQL (≥ 9.4)\n\n## Installation\n\nTo install Laravel Mail as a package from your command line, run the following command:\n\n```bash\ncomposer require laravelcompany/laravel-mail\n```\n\nAlternatively, you can add the following to your `composer.json` file:\n\n```json\n\"laravelcompany/laravel-mail\": \"^1.0\"\n```\n\nand then run `composer update` to install it.\n\n## Publish Assets\nRun the following command to publish Laravel Mail's assets:e\n\n```bash\nphp artisan vendor:publish --provider=LaravelCompany\\\\Mail\\\\MailBaseServiceProvider\n```\n\n## Resolvers & Routes\nLaravel Mail's functionality is linked to your application through the use of the `Laravel Mail` facade.\nThe following sections will detail how to use this facade to get Laravel Mail up and running inside your application.\n\n> Please read all sections and decide on the relevancy to your use case. Some sections are marked as Required, and will need to be completed for a successful integration with Laravel Mail.\nOther sections are marked as Optional and may or may not be required for your own use case.\n\n## Workspace Resolver (Required)\nTo support multi-tenancy, Laravel Mail requires a \"Workspace ID\" for the session.\nEven if your host application does not use multi-tenancy, you will still need to provide a \"dummy\" integer.\n\nThe Workspace ID will be used in both web and API sessions and will be stored to the database in the `workspace_id` column of tables like `laravel_mail_campaigns`, `laravel_mail_subscribers`, etc.\n\n> Multi-tenancy is optional. If your application is not multi-tenant, or you do not wish to use Laravel Mail in a multi-tenant way, you can provide a hardcoded integer value of your choice to the resolver.\n\n\n### Registering the Workspace Resolver\nInside the `boot` method of a service provider class, provide a closure to the `LaravelCompany\\Mail\\Facades\\LaravelMail::setCurrentWorkspaceIdResolver()` method that resolves a workspace ID.\n\nThe return value of your closure __must__ be an integer value and __must not__ be null.\n\nAs an example:\n\n```php\n\u003C?php\ndeclare(strict_types=1);\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse LaravelCompany\\Mail\\Facades\\LaravelMail;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    // …\n    public function boot(): void\n    {\n        LaravelMail::setCurrentWorkspaceIdResolver(function () {\n            return 1;\n        });\n    }\n}\n```\n\n## Routes\n\nThere are 4 route definitions that can be defined:\n\n- Web Routes (required)\n- Public Web Routes (required)\n- Public API Routes (required)\n- API Routes (optional)\n\nThe following routes can all be placed inside a route group, in which case any group prefixes, names, middlewares, etc, will also be applied.\nHowever, note that Laravel Mail's route names already include `laravel-mail.`.\n\n### Web Routes (Required)\nTo access Laravel Mail's application resources (e.g., Campaigns, Subscribers, Templates, Messages, etc) from the browser, you must register Laravel Mail's web routes.\n\nInside a route file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::webRoutes()` method.\n\n> These routes include features like subscriber management and campaign sending, and therefore should not be exposed without some means of authentication.\n\n```php\n// routes/web.php\nRoute::middleware(['auth'])->prefix('laravel-mail')->group(function () {\n    LaravelMail::webRoutes();\n});\n```\n\n### Public Web Routes (Required)\n\nTo provide access to features such as unsubscribing from a mailing list and viewing subscriber emails in the browser, you must register Laravel Mail's public web routes.\n\nInside a routes file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::publicWebRoutes()` method.\n\n> These routes include publicly accessible features such as unsubscribing from a mailing list, and therefore should _not_ be guarded by authentication.\n\n\n```php\n// routes/web.php\nLaravelMail::publicWebRoutes();\n```\n\n### Public API Routes (Required)\nTo handle campaign tracking (i.e. webhooks from your email service provider), you must register Laravel Mail's public API routes.\n\nInside a routes file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::publicApiRoutes()` method.\n\n> These routes include webhooks that are needed to track campaigns inside Laravel Mail, and must be accessible to your email service.\n\n```php\n// routes/api.php\nLaravelMail::publicApiRoutes();\n```\n\n### Set Up Laravel Mail API Routes (Optional)\nIf you wish to provide access to Laravel Mail's API, then you must register Laravel Mail's API routes.\n\nInside a routes file, call the `LaravelCompany\\Mail\\Facades\\LaravelMail::apiRoutes()` method.\n\n> These routes include features like subscriber and campaign management, and should not be exposed to the internet without some means of authentication.\n\n```php\n// routes/api.php\nRoute::middleware(['auth:api'])->group(function() {\n    LaravelMail::apiRoutes();\n});\n```\n\n## Set Up Sidebar HTML Content Resolver (Optional)\nOptionally, you can provide content to the sidebar navigation in Laravel Mail.\nThis allows you to inject new menu items that can link to resources you build yourself.\nThis is helpful for providing access to functionality like user management inside Laravel Mail.\n\n### Registering Sidebar HTML Resolver\nInside the `boot` method of a service provider class, provide a closure to the `LaravelCompany\\Mail\\Facades\\LaravelMail::setSidebarHtmlContentResolver()` method.\n\nThe return value of your closure __must__ be a string value or null. You should ideally provide HTML, as it will be rendered directly into the view as provided.\n\nAs an example:\n\n```php\n    public function boot(): void\n    {\n        LaravelMail::setSidebarHtmlContentResolver(function () {\n            return view('layouts.sidebar.manageUsersMenuItem')->render();\n        });\n    }\n```\n\n## Set Up Header HTML Content Resolver (Optional)\nYou can optionally provide content to the header in Laravel Mail.\nThis allows you to inject resources that you build yourself.\nThis is helpful for providing functionality like user profile management or workspace switchers inside Laravel Mail.\n\n### Registering Header HTML Resolver\nInside the `boot` method of a service provider class, provide a closure to the `LaravelCompany\\Mail\\Facades\\LaravelMail::setHeaderHtmlContentResolver()` method.\n\nThe return value of your closure __must__ be a string value or null. You should ideally provide HTML, as it will be rendered directly into the view as provided.\n\nAs an example:\n\n```php\n    public function boot(): void\n    {\n        LaravelMail::setHeaderHtmlContentResolver(function () {\n            return view('layouts.header.userManagementHeader')->render();\n        });\n    }\n```\n\n## Further Examples\nTo see an example of Laravel Mail used as a fully multi-tenant application, please see our own [host application](https://github.com/laravelcompany/app.laravelmail.com),\nwhich takes advantage of all the integration features available in the Laravel Mail package.","src/content/real-docs/getting-started/package-instalation.mdx","0790ee5aff06fff2","getting-started/package-instalation.mdx"]